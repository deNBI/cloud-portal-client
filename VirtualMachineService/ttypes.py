#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Backend(object):
    """
    Attributes:
     - id
     - owner
     - location_url
     - template
     - template_version

    """


    def __init__(self, id=None, owner=None, location_url=None, template=None, template_version=None,):
        self.id = id
        self.owner = owner
        self.location_url = location_url
        self.template = template
        self.template_version = template_version

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.owner = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.location_url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.template = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.template_version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Backend')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.owner is not None:
            oprot.writeFieldBegin('owner', TType.STRING, 2)
            oprot.writeString(self.owner.encode('utf-8') if sys.version_info[0] == 2 else self.owner)
            oprot.writeFieldEnd()
        if self.location_url is not None:
            oprot.writeFieldBegin('location_url', TType.STRING, 3)
            oprot.writeString(self.location_url.encode('utf-8') if sys.version_info[0] == 2 else self.location_url)
            oprot.writeFieldEnd()
        if self.template is not None:
            oprot.writeFieldBegin('template', TType.STRING, 4)
            oprot.writeString(self.template.encode('utf-8') if sys.version_info[0] == 2 else self.template)
            oprot.writeFieldEnd()
        if self.template_version is not None:
            oprot.writeFieldBegin('template_version', TType.STRING, 5)
            oprot.writeString(self.template_version.encode('utf-8') if sys.version_info[0] == 2 else self.template_version)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Flavor(object):
    """
    This Struct defines a Flavor.

    Attributes:
     - vcpus: The vcpus of the flavor
     - ram: The ram of the flavor
     - disk: The disk of the flavor
     - name: The name of the flavor
     - openstack_id: The openstack_id of the flavor
     - description: The description of the flavor
     - tags: List of tags from flavor

    """


    def __init__(self, vcpus=None, ram=None, disk=None, name=None, openstack_id=None, description=None, tags=None,):
        self.vcpus = vcpus
        self.ram = ram
        self.disk = disk
        self.name = name
        self.openstack_id = openstack_id
        self.description = description
        self.tags = tags

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.vcpus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.ram = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.disk = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.openstack_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.tags = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.tags.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Flavor')
        if self.vcpus is not None:
            oprot.writeFieldBegin('vcpus', TType.I32, 1)
            oprot.writeI32(self.vcpus)
            oprot.writeFieldEnd()
        if self.ram is not None:
            oprot.writeFieldBegin('ram', TType.I32, 2)
            oprot.writeI32(self.ram)
            oprot.writeFieldEnd()
        if self.disk is not None:
            oprot.writeFieldBegin('disk', TType.I32, 3)
            oprot.writeI32(self.disk)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 4)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.openstack_id is not None:
            oprot.writeFieldBegin('openstack_id', TType.STRING, 5)
            oprot.writeString(self.openstack_id.encode('utf-8') if sys.version_info[0] == 2 else self.openstack_id)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 6)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.tags is not None:
            oprot.writeFieldBegin('tags', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.tags))
            for iter6 in self.tags:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.vcpus is None:
            raise TProtocolException(message='Required field vcpus is unset!')
        if self.ram is None:
            raise TProtocolException(message='Required field ram is unset!')
        if self.disk is None:
            raise TProtocolException(message='Required field disk is unset!')
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.openstack_id is None:
            raise TProtocolException(message='Required field openstack_id is unset!')
        if self.tags is None:
            raise TProtocolException(message='Required field tags is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Image(object):
    """
    This Struct defines an Image.

    Attributes:
     - name: The name of the image
     - min_disk: The min_diks of the image
     - min_ram: The min_ram of the image
     - status: The status of the image
     - created_at: The creation time of the image
     - updated_at: The updated time of the image
     - openstack_id: The openstack_id the image
     - description: The description of the image
     - tag: List of tags from image
     - is_snapshot: If the Image is a snapshot

    """


    def __init__(self, name=None, min_disk=None, min_ram=None, status=None, created_at=None, updated_at=None, openstack_id=None, description=None, tag=None, is_snapshot=None,):
        self.name = name
        self.min_disk = min_disk
        self.min_ram = min_ram
        self.status = status
        self.created_at = created_at
        self.updated_at = updated_at
        self.openstack_id = openstack_id
        self.description = description
        self.tag = tag
        self.is_snapshot = is_snapshot

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.min_disk = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.min_ram = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.status = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.created_at = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.updated_at = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.openstack_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.tag = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.tag.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.is_snapshot = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Image')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.min_disk is not None:
            oprot.writeFieldBegin('min_disk', TType.I32, 2)
            oprot.writeI32(self.min_disk)
            oprot.writeFieldEnd()
        if self.min_ram is not None:
            oprot.writeFieldBegin('min_ram', TType.I32, 3)
            oprot.writeI32(self.min_ram)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRING, 4)
            oprot.writeString(self.status.encode('utf-8') if sys.version_info[0] == 2 else self.status)
            oprot.writeFieldEnd()
        if self.created_at is not None:
            oprot.writeFieldBegin('created_at', TType.STRING, 5)
            oprot.writeString(self.created_at.encode('utf-8') if sys.version_info[0] == 2 else self.created_at)
            oprot.writeFieldEnd()
        if self.updated_at is not None:
            oprot.writeFieldBegin('updated_at', TType.STRING, 6)
            oprot.writeString(self.updated_at.encode('utf-8') if sys.version_info[0] == 2 else self.updated_at)
            oprot.writeFieldEnd()
        if self.openstack_id is not None:
            oprot.writeFieldBegin('openstack_id', TType.STRING, 7)
            oprot.writeString(self.openstack_id.encode('utf-8') if sys.version_info[0] == 2 else self.openstack_id)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 8)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.tag is not None:
            oprot.writeFieldBegin('tag', TType.LIST, 9)
            oprot.writeListBegin(TType.STRING, len(self.tag))
            for iter13 in self.tag:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.is_snapshot is not None:
            oprot.writeFieldBegin('is_snapshot', TType.BOOL, 10)
            oprot.writeBool(self.is_snapshot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.min_disk is None:
            raise TProtocolException(message='Required field min_disk is unset!')
        if self.min_ram is None:
            raise TProtocolException(message='Required field min_ram is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.openstack_id is None:
            raise TProtocolException(message='Required field openstack_id is unset!')
        if self.tag is None:
            raise TProtocolException(message='Required field tag is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class VM(object):
    """
    This Struct defines a VirtualMachine.

    Attributes:
     - flav: The flavor of the VM
     - img: The image of the VM
     - status: The status of the VM
     - metadata: The metadata of the VM
     - project_id: The project_id of the VM
     - keyname: The keyname from the public key of the VM
     - openstack_id: The openstack_id of the VM
     - name: The name of the VM
     - created_at: The the creation time of the VM
     - floating_ip: The floating ip of the VM
     - fixed_ip: The fixed ips of the VM
     - diskspace: Diskspace in GB from additional volume
     - volume_id: Id of additional volume

    """


    def __init__(self, flav=None, img=None, status=None, metadata=None, project_id=None, keyname=None, openstack_id=None, name=None, created_at=None, floating_ip=None, fixed_ip=None, diskspace=None, volume_id=None,):
        self.flav = flav
        self.img = img
        self.status = status
        self.metadata = metadata
        self.project_id = project_id
        self.keyname = keyname
        self.openstack_id = openstack_id
        self.name = name
        self.created_at = created_at
        self.floating_ip = floating_ip
        self.fixed_ip = fixed_ip
        self.diskspace = diskspace
        self.volume_id = volume_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.flav = Flavor()
                    self.flav.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.img = Image()
                    self.img.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.status = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.metadata = {}
                    (_ktype15, _vtype16, _size14) = iprot.readMapBegin()
                    for _i18 in range(_size14):
                        _key19 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val20 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.metadata[_key19] = _val20
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.project_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.keyname = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.openstack_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.created_at = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.floating_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.fixed_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.diskspace = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.volume_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('VM')
        if self.flav is not None:
            oprot.writeFieldBegin('flav', TType.STRUCT, 1)
            self.flav.write(oprot)
            oprot.writeFieldEnd()
        if self.img is not None:
            oprot.writeFieldBegin('img', TType.STRUCT, 2)
            self.img.write(oprot)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRING, 3)
            oprot.writeString(self.status.encode('utf-8') if sys.version_info[0] == 2 else self.status)
            oprot.writeFieldEnd()
        if self.metadata is not None:
            oprot.writeFieldBegin('metadata', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.metadata))
            for kiter21, viter22 in self.metadata.items():
                oprot.writeString(kiter21.encode('utf-8') if sys.version_info[0] == 2 else kiter21)
                oprot.writeString(viter22.encode('utf-8') if sys.version_info[0] == 2 else viter22)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.project_id is not None:
            oprot.writeFieldBegin('project_id', TType.STRING, 5)
            oprot.writeString(self.project_id.encode('utf-8') if sys.version_info[0] == 2 else self.project_id)
            oprot.writeFieldEnd()
        if self.keyname is not None:
            oprot.writeFieldBegin('keyname', TType.STRING, 6)
            oprot.writeString(self.keyname.encode('utf-8') if sys.version_info[0] == 2 else self.keyname)
            oprot.writeFieldEnd()
        if self.openstack_id is not None:
            oprot.writeFieldBegin('openstack_id', TType.STRING, 7)
            oprot.writeString(self.openstack_id.encode('utf-8') if sys.version_info[0] == 2 else self.openstack_id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 8)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.created_at is not None:
            oprot.writeFieldBegin('created_at', TType.STRING, 9)
            oprot.writeString(self.created_at.encode('utf-8') if sys.version_info[0] == 2 else self.created_at)
            oprot.writeFieldEnd()
        if self.floating_ip is not None:
            oprot.writeFieldBegin('floating_ip', TType.STRING, 10)
            oprot.writeString(self.floating_ip.encode('utf-8') if sys.version_info[0] == 2 else self.floating_ip)
            oprot.writeFieldEnd()
        if self.fixed_ip is not None:
            oprot.writeFieldBegin('fixed_ip', TType.STRING, 11)
            oprot.writeString(self.fixed_ip.encode('utf-8') if sys.version_info[0] == 2 else self.fixed_ip)
            oprot.writeFieldEnd()
        if self.diskspace is not None:
            oprot.writeFieldBegin('diskspace', TType.I32, 12)
            oprot.writeI32(self.diskspace)
            oprot.writeFieldEnd()
        if self.volume_id is not None:
            oprot.writeFieldBegin('volume_id', TType.STRING, 13)
            oprot.writeString(self.volume_id.encode('utf-8') if sys.version_info[0] == 2 else self.volume_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.flav is None:
            raise TProtocolException(message='Required field flav is unset!')
        if self.img is None:
            raise TProtocolException(message='Required field img is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.keyname is None:
            raise TProtocolException(message='Required field keyname is unset!')
        if self.openstack_id is None:
            raise TProtocolException(message='Required field openstack_id is unset!')
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.created_at is None:
            raise TProtocolException(message='Required field created_at is unset!')
        if self.fixed_ip is None:
            raise TProtocolException(message='Required field fixed_ip is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PlaybookResult(object):
    """
    This Struct defines the result of a playbook run.

    Attributes:
     - status: The exit status code of the run
     - stdout: The standard logs of the run
     - stderr: The error logs of the run

    """


    def __init__(self, status=None, stdout=None, stderr=None,):
        self.status = status
        self.stdout = stdout
        self.stderr = stderr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.stdout = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.stderr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PlaybookResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.stdout is not None:
            oprot.writeFieldBegin('stdout', TType.STRING, 2)
            oprot.writeString(self.stdout.encode('utf-8') if sys.version_info[0] == 2 else self.stdout)
            oprot.writeFieldEnd()
        if self.stderr is not None:
            oprot.writeFieldBegin('stderr', TType.STRING, 3)
            oprot.writeString(self.stderr.encode('utf-8') if sys.version_info[0] == 2 else self.stderr)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.stdout is None:
            raise TProtocolException(message='Required field stdout is unset!')
        if self.stderr is None:
            raise TProtocolException(message='Required field stderr is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class otherException(TException):
    """
    Attributes:
     - Reason: Every other exception.

    """


    def __init__(self, Reason=None,):
        self.Reason = Reason

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Reason = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('otherException')
        if self.Reason is not None:
            oprot.writeFieldBegin('Reason', TType.STRING, 1)
            oprot.writeString(self.Reason.encode('utf-8') if sys.version_info[0] == 2 else self.Reason)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ressourceException(TException):
    """
    Attributes:
     - Reason: Name already used.

    """


    def __init__(self, Reason=None,):
        self.Reason = Reason

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Reason = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ressourceException')
        if self.Reason is not None:
            oprot.writeFieldBegin('Reason', TType.STRING, 1)
            oprot.writeString(self.Reason.encode('utf-8') if sys.version_info[0] == 2 else self.Reason)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class nameException(TException):
    """
    Attributes:
     - Reason: @ Name already used.

    """


    def __init__(self, Reason=None,):
        self.Reason = Reason

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Reason = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('nameException')
        if self.Reason is not None:
            oprot.writeFieldBegin('Reason', TType.STRING, 1)
            oprot.writeString(self.Reason.encode('utf-8') if sys.version_info[0] == 2 else self.Reason)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class serverNotFoundException(TException):
    """
    Attributes:
     - Reason: Server not found.

    """


    def __init__(self, Reason=None,):
        self.Reason = Reason

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Reason = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('serverNotFoundException')
        if self.Reason is not None:
            oprot.writeFieldBegin('Reason', TType.STRING, 1)
            oprot.writeString(self.Reason.encode('utf-8') if sys.version_info[0] == 2 else self.Reason)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class networkNotFoundException(TException):
    """
    Attributes:
     - Reason: Network not found.

    """


    def __init__(self, Reason=None,):
        self.Reason = Reason

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Reason = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('networkNotFoundException')
        if self.Reason is not None:
            oprot.writeFieldBegin('Reason', TType.STRING, 1)
            oprot.writeString(self.Reason.encode('utf-8') if sys.version_info[0] == 2 else self.Reason)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class imageNotFoundException(TException):
    """
    Attributes:
     - Reason: Image not found.

    """


    def __init__(self, Reason=None,):
        self.Reason = Reason

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Reason = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('imageNotFoundException')
        if self.Reason is not None:
            oprot.writeFieldBegin('Reason', TType.STRING, 1)
            oprot.writeString(self.Reason.encode('utf-8') if sys.version_info[0] == 2 else self.Reason)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class flavorNotFoundException(TException):
    """
    Attributes:
     - Reason

    """


    def __init__(self, Reason=None,):
        self.Reason = Reason

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Reason = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('flavorNotFoundException')
        if self.Reason is not None:
            oprot.writeFieldBegin('Reason', TType.STRING, 1)
            oprot.writeString(self.Reason.encode('utf-8') if sys.version_info[0] == 2 else self.Reason)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class authenticationException(TException):
    """
    Authentication Failed Exception

    Attributes:
     - Reason: Reason why the Authentication failed

    """


    def __init__(self, Reason=None,):
        self.Reason = Reason

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Reason = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('authenticationException')
        if self.Reason is not None:
            oprot.writeFieldBegin('Reason', TType.STRING, 1)
            oprot.writeString(self.Reason.encode('utf-8') if sys.version_info[0] == 2 else self.Reason)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Backend)
Backend.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'id', None, None, ),  # 1
    (2, TType.STRING, 'owner', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'location_url', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'template', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'template_version', 'UTF8', None, ),  # 5
)
all_structs.append(Flavor)
Flavor.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'vcpus', None, None, ),  # 1
    (2, TType.I32, 'ram', None, None, ),  # 2
    (3, TType.I32, 'disk', None, None, ),  # 3
    (4, TType.STRING, 'name', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'openstack_id', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'description', 'UTF8', None, ),  # 6
    (7, TType.LIST, 'tags', (TType.STRING, 'UTF8', False), None, ),  # 7
)
all_structs.append(Image)
Image.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.I32, 'min_disk', None, None, ),  # 2
    (3, TType.I32, 'min_ram', None, None, ),  # 3
    (4, TType.STRING, 'status', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'created_at', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'updated_at', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'openstack_id', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'description', 'UTF8', None, ),  # 8
    (9, TType.LIST, 'tag', (TType.STRING, 'UTF8', False), None, ),  # 9
    (10, TType.BOOL, 'is_snapshot', None, None, ),  # 10
)
all_structs.append(VM)
VM.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'flav', [Flavor, None], None, ),  # 1
    (2, TType.STRUCT, 'img', [Image, None], None, ),  # 2
    (3, TType.STRING, 'status', 'UTF8', None, ),  # 3
    (4, TType.MAP, 'metadata', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.STRING, 'project_id', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'keyname', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'openstack_id', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'name', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'created_at', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'floating_ip', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'fixed_ip', 'UTF8', None, ),  # 11
    (12, TType.I32, 'diskspace', None, None, ),  # 12
    (13, TType.STRING, 'volume_id', 'UTF8', None, ),  # 13
)
all_structs.append(PlaybookResult)
PlaybookResult.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.STRING, 'stdout', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'stderr', 'UTF8', None, ),  # 3
)
all_structs.append(otherException)
otherException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Reason', 'UTF8', None, ),  # 1
)
all_structs.append(ressourceException)
ressourceException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Reason', 'UTF8', None, ),  # 1
)
all_structs.append(nameException)
nameException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Reason', 'UTF8', None, ),  # 1
)
all_structs.append(serverNotFoundException)
serverNotFoundException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Reason', 'UTF8', None, ),  # 1
)
all_structs.append(networkNotFoundException)
networkNotFoundException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Reason', 'UTF8', None, ),  # 1
)
all_structs.append(imageNotFoundException)
imageNotFoundException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Reason', 'UTF8', None, ),  # 1
)
all_structs.append(flavorNotFoundException)
flavorNotFoundException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Reason', 'UTF8', None, ),  # 1
)
all_structs.append(authenticationException)
authenticationException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Reason', 'UTF8', None, ),  # 1
)
fix_spec(all_structs)
del all_structs
