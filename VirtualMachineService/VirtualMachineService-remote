#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from VirtualMachineService import VirtualMachineService
from VirtualMachineService.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  bool check_Version(double version)')
    print('  string get_client_version()')
    print('   get_gateway_ip()')
    print('   get_calculation_formulars()')
    print('  string import_keypair(string keyname, string public_key)')
    print('   get_vm_ports(string openstack_id)')
    print('   get_Flavors()')
    print('   get_Images()')
    print('  Image get_Image_with_Tag(string openstack_id)')
    print('   get_Images_by_filter( filter_json)')
    print('  Volume get_volume(string volume_id)')
    print('   get_volumes_by_ids( volume_ids)')
    print('  bool delete_server(string openstack_id)')
    print('   add_metadata_to_server(string servername,  metadata)')
    print('   delete_metadata_from_server(string servername,  keys)')
    print('  string add_floating_ip_to_server(string openstack_id, string network)')
    print('  bool create_connection(string username, string password, string auth_url, string user_domain_name, string project_domain_name)')
    print('   start_server_without_playbook(string flavor, string image, string public_key, string servername,  metadata, bool https, bool http,  resenv,  volume_ids)')
    print('   start_server_with_mounted_volume(string flavor, string image, string public_key, string servername,  metadata, bool https, bool http,  resenv,  volume_ids)')
    print('   start_server(string flavor, string image, string public_key, string servername,  metadata, string diskspace, string volumename, bool https, bool http,  resenv)')
    print('   start_server_with_custom_key(string flavor, string image, string servername,  metadata, bool http, bool https,  resenv,  volume_ids)')
    print('  bool exist_server(string name)')
    print('  int create_and_deploy_playbook(string public_key,  playbooks_information, string openstack_id)')
    print('  PlaybookResult get_playbook_logs(string openstack_id)')
    print('  bool has_forc()')
    print('  string get_forc_url()')
    print('  Backend create_backend(string elixir_id, string user_key_url, string template, string upstream_url)')
    print('   get_backends()')
    print('   get_backends_by_owner(string elixir_id)')
    print('   get_backends_by_template(string template)')
    print('  Backend get_backend_by_id(i64 id)')
    print('  string delete_backend(i64 id)')
    print('   get_templates()')
    print('   get_allowed_templates()')
    print('   get_templates_by_template(string template_name)')
    print('   check_template(string template_name, string template_version)')
    print('  bool add_udp_security_group(string server_id)')
    print('   get_servers()')
    print('   get_servers_by_ids( server_ids)')
    print('   get_servers_by_bibigrid_id(string bibigrid_id)')
    print('  ClusterInfo get_cluster_info(string cluster_id)')
    print('   get_cluster_status(string cluster_id)')
    print('  VM get_server(string openstack_id)')
    print('  bool stop_server(string openstack_id)')
    print('  string create_snapshot(string openstack_id, string name, string elixir_id,  base_tags, string description)')
    print('   get_limits()')
    print('   start_cluster(string public_key, ClusterInstance master_instance,  worker_instance, string user)')
    print('   terminate_cluster(string cluster_id)')
    print('  bool delete_image(string image_id)')
    print('  bool delete_volume_attachment(string volume_id, string server_id)')
    print('  bool delete_volume(string volume_id)')
    print('   attach_volume_to_server(string openstack_id, string volume_id)')
    print('  VM check_server_status(string openstack_id)')
    print('  string setUserPassword(string user, string password)')
    print('  bool resume_server(string openstack_id)')
    print('   create_volume(string volume_name, int volume_storage,  metadata)')
    print('  bool reboot_server(string server_id, string reboot_type)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = VirtualMachineService.Client(protocol)
transport.open()

if cmd == 'check_Version':
    if len(args) != 1:
        print('check_Version requires 1 args')
        sys.exit(1)
    pp.pprint(client.check_Version(eval(args[0]),))

elif cmd == 'get_client_version':
    if len(args) != 0:
        print('get_client_version requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_client_version())

elif cmd == 'get_gateway_ip':
    if len(args) != 0:
        print('get_gateway_ip requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_gateway_ip())

elif cmd == 'get_calculation_formulars':
    if len(args) != 0:
        print('get_calculation_formulars requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_calculation_formulars())

elif cmd == 'import_keypair':
    if len(args) != 2:
        print('import_keypair requires 2 args')
        sys.exit(1)
    pp.pprint(client.import_keypair(args[0], args[1],))

elif cmd == 'get_vm_ports':
    if len(args) != 1:
        print('get_vm_ports requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_vm_ports(args[0],))

elif cmd == 'get_Flavors':
    if len(args) != 0:
        print('get_Flavors requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_Flavors())

elif cmd == 'get_Images':
    if len(args) != 0:
        print('get_Images requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_Images())

elif cmd == 'get_Image_with_Tag':
    if len(args) != 1:
        print('get_Image_with_Tag requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_Image_with_Tag(args[0],))

elif cmd == 'get_Images_by_filter':
    if len(args) != 1:
        print('get_Images_by_filter requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_Images_by_filter(eval(args[0]),))

elif cmd == 'get_volume':
    if len(args) != 1:
        print('get_volume requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_volume(args[0],))

elif cmd == 'get_volumes_by_ids':
    if len(args) != 1:
        print('get_volumes_by_ids requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_volumes_by_ids(eval(args[0]),))

elif cmd == 'delete_server':
    if len(args) != 1:
        print('delete_server requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_server(args[0],))

elif cmd == 'add_metadata_to_server':
    if len(args) != 2:
        print('add_metadata_to_server requires 2 args')
        sys.exit(1)
    pp.pprint(client.add_metadata_to_server(args[0], eval(args[1]),))

elif cmd == 'delete_metadata_from_server':
    if len(args) != 2:
        print('delete_metadata_from_server requires 2 args')
        sys.exit(1)
    pp.pprint(client.delete_metadata_from_server(args[0], eval(args[1]),))

elif cmd == 'add_floating_ip_to_server':
    if len(args) != 2:
        print('add_floating_ip_to_server requires 2 args')
        sys.exit(1)
    pp.pprint(client.add_floating_ip_to_server(args[0], args[1],))

elif cmd == 'create_connection':
    if len(args) != 5:
        print('create_connection requires 5 args')
        sys.exit(1)
    pp.pprint(client.create_connection(args[0], args[1], args[2], args[3], args[4],))

elif cmd == 'start_server_without_playbook':
    if len(args) != 9:
        print('start_server_without_playbook requires 9 args')
        sys.exit(1)
    pp.pprint(client.start_server_without_playbook(args[0], args[1], args[2], args[3], eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]), eval(args[8]),))

elif cmd == 'start_server_with_mounted_volume':
    if len(args) != 9:
        print('start_server_with_mounted_volume requires 9 args')
        sys.exit(1)
    pp.pprint(client.start_server_with_mounted_volume(args[0], args[1], args[2], args[3], eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]), eval(args[8]),))

elif cmd == 'start_server':
    if len(args) != 10:
        print('start_server requires 10 args')
        sys.exit(1)
    pp.pprint(client.start_server(args[0], args[1], args[2], args[3], eval(args[4]), args[5], args[6], eval(args[7]), eval(args[8]), eval(args[9]),))

elif cmd == 'start_server_with_custom_key':
    if len(args) != 8:
        print('start_server_with_custom_key requires 8 args')
        sys.exit(1)
    pp.pprint(client.start_server_with_custom_key(args[0], args[1], args[2], eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]),))

elif cmd == 'exist_server':
    if len(args) != 1:
        print('exist_server requires 1 args')
        sys.exit(1)
    pp.pprint(client.exist_server(args[0],))

elif cmd == 'create_and_deploy_playbook':
    if len(args) != 3:
        print('create_and_deploy_playbook requires 3 args')
        sys.exit(1)
    pp.pprint(client.create_and_deploy_playbook(args[0], eval(args[1]), args[2],))

elif cmd == 'get_playbook_logs':
    if len(args) != 1:
        print('get_playbook_logs requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_playbook_logs(args[0],))

elif cmd == 'has_forc':
    if len(args) != 0:
        print('has_forc requires 0 args')
        sys.exit(1)
    pp.pprint(client.has_forc())

elif cmd == 'get_forc_url':
    if len(args) != 0:
        print('get_forc_url requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_forc_url())

elif cmd == 'create_backend':
    if len(args) != 4:
        print('create_backend requires 4 args')
        sys.exit(1)
    pp.pprint(client.create_backend(args[0], args[1], args[2], args[3],))

elif cmd == 'get_backends':
    if len(args) != 0:
        print('get_backends requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_backends())

elif cmd == 'get_backends_by_owner':
    if len(args) != 1:
        print('get_backends_by_owner requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_backends_by_owner(args[0],))

elif cmd == 'get_backends_by_template':
    if len(args) != 1:
        print('get_backends_by_template requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_backends_by_template(args[0],))

elif cmd == 'get_backend_by_id':
    if len(args) != 1:
        print('get_backend_by_id requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_backend_by_id(eval(args[0]),))

elif cmd == 'delete_backend':
    if len(args) != 1:
        print('delete_backend requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_backend(eval(args[0]),))

elif cmd == 'get_templates':
    if len(args) != 0:
        print('get_templates requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_templates())

elif cmd == 'get_allowed_templates':
    if len(args) != 0:
        print('get_allowed_templates requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_allowed_templates())

elif cmd == 'get_templates_by_template':
    if len(args) != 1:
        print('get_templates_by_template requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_templates_by_template(args[0],))

elif cmd == 'check_template':
    if len(args) != 2:
        print('check_template requires 2 args')
        sys.exit(1)
    pp.pprint(client.check_template(args[0], args[1],))

elif cmd == 'add_udp_security_group':
    if len(args) != 1:
        print('add_udp_security_group requires 1 args')
        sys.exit(1)
    pp.pprint(client.add_udp_security_group(args[0],))

elif cmd == 'get_servers':
    if len(args) != 0:
        print('get_servers requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_servers())

elif cmd == 'get_servers_by_ids':
    if len(args) != 1:
        print('get_servers_by_ids requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_servers_by_ids(eval(args[0]),))

elif cmd == 'get_servers_by_bibigrid_id':
    if len(args) != 1:
        print('get_servers_by_bibigrid_id requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_servers_by_bibigrid_id(args[0],))

elif cmd == 'get_cluster_info':
    if len(args) != 1:
        print('get_cluster_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_cluster_info(args[0],))

elif cmd == 'get_cluster_status':
    if len(args) != 1:
        print('get_cluster_status requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_cluster_status(args[0],))

elif cmd == 'get_server':
    if len(args) != 1:
        print('get_server requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_server(args[0],))

elif cmd == 'stop_server':
    if len(args) != 1:
        print('stop_server requires 1 args')
        sys.exit(1)
    pp.pprint(client.stop_server(args[0],))

elif cmd == 'create_snapshot':
    if len(args) != 5:
        print('create_snapshot requires 5 args')
        sys.exit(1)
    pp.pprint(client.create_snapshot(args[0], args[1], args[2], eval(args[3]), args[4],))

elif cmd == 'get_limits':
    if len(args) != 0:
        print('get_limits requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_limits())

elif cmd == 'start_cluster':
    if len(args) != 4:
        print('start_cluster requires 4 args')
        sys.exit(1)
    pp.pprint(client.start_cluster(args[0], eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'terminate_cluster':
    if len(args) != 1:
        print('terminate_cluster requires 1 args')
        sys.exit(1)
    pp.pprint(client.terminate_cluster(args[0],))

elif cmd == 'delete_image':
    if len(args) != 1:
        print('delete_image requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_image(args[0],))

elif cmd == 'delete_volume_attachment':
    if len(args) != 2:
        print('delete_volume_attachment requires 2 args')
        sys.exit(1)
    pp.pprint(client.delete_volume_attachment(args[0], args[1],))

elif cmd == 'delete_volume':
    if len(args) != 1:
        print('delete_volume requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_volume(args[0],))

elif cmd == 'attach_volume_to_server':
    if len(args) != 2:
        print('attach_volume_to_server requires 2 args')
        sys.exit(1)
    pp.pprint(client.attach_volume_to_server(args[0], args[1],))

elif cmd == 'check_server_status':
    if len(args) != 1:
        print('check_server_status requires 1 args')
        sys.exit(1)
    pp.pprint(client.check_server_status(args[0],))

elif cmd == 'setUserPassword':
    if len(args) != 2:
        print('setUserPassword requires 2 args')
        sys.exit(1)
    pp.pprint(client.setUserPassword(args[0], args[1],))

elif cmd == 'resume_server':
    if len(args) != 1:
        print('resume_server requires 1 args')
        sys.exit(1)
    pp.pprint(client.resume_server(args[0],))

elif cmd == 'create_volume':
    if len(args) != 3:
        print('create_volume requires 3 args')
        sys.exit(1)
    pp.pprint(client.create_volume(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'reboot_server':
    if len(args) != 2:
        print('reboot_server requires 2 args')
        sys.exit(1)
    pp.pprint(client.reboot_server(args[0], args[1],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
