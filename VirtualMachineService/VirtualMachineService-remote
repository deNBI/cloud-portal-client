#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from VirtualMachineService import VirtualMachineService
from VirtualMachineService.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  bool check_Version(double version)')
    print('  string get_client_version()')
    print('  string import_keypair(string keyname, string public_key)')
    print('   get_IP_PORT(string openstack_id)')
    print('   get_Flavors()')
    print('   get_Images()')
    print('  bool delete_server(string openstack_id)')
    print('   add_metadata_to_server(string servername,  metadata)')
    print('   delete_metadata_from_server(string servername,  keys)')
    print('  string add_floating_ip_to_server(string openstack_id, string network)')
    print('  bool create_connection(string username, string password, string auth_url, string user_domain_name, string project_domain_name)')
    print('   start_server(string flavor, string image, string servername, string diskspace, string volumename)')
    print('  VM get_server(string openstack_id)')
    print('  bool stop_server(string openstack_id)')
    print('  string create_snapshot(string openstack_id, string name, string elixir_id, string base_tag)')
    print('   get_limits()')
    print('  bool delete_image(string image_id)')
    print('  bool delete_volume_attachment(string volume_id, string server_id)')
    print('  bool delete_volume(string volume_id)')
    print('  bool attach_volume_to_server(string openstack_id, string volume_id)')
    print('  VM check_server_status(string openstack_id, int diskspace, string volume_id)')
    print('  string setUserPassword(string user, string password)')
    print('  bool resume_server(string openstack_id)')
    print('  string create_volume(string volume_name, int diskspace)')
    print('  bool reboot_server(string server_id, string reboot_type)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = VirtualMachineService.Client(protocol)
transport.open()

if cmd == 'check_Version':
    if len(args) != 1:
        print('check_Version requires 1 args')
        sys.exit(1)
    pp.pprint(client.check_Version(eval(args[0]),))

elif cmd == 'get_client_version':
    if len(args) != 0:
        print('get_client_version requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_client_version())

elif cmd == 'import_keypair':
    if len(args) != 2:
        print('import_keypair requires 2 args')
        sys.exit(1)
    pp.pprint(client.import_keypair(args[0], args[1],))

elif cmd == 'get_IP_PORT':
    if len(args) != 1:
        print('get_IP_PORT requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_IP_PORT(args[0],))

elif cmd == 'get_Flavors':
    if len(args) != 0:
        print('get_Flavors requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_Flavors())

elif cmd == 'get_Images':
    if len(args) != 0:
        print('get_Images requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_Images())

elif cmd == 'delete_server':
    if len(args) != 1:
        print('delete_server requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_server(args[0],))

elif cmd == 'add_metadata_to_server':
    if len(args) != 2:
        print('add_metadata_to_server requires 2 args')
        sys.exit(1)
    pp.pprint(client.add_metadata_to_server(args[0], eval(args[1]),))

elif cmd == 'delete_metadata_from_server':
    if len(args) != 2:
        print('delete_metadata_from_server requires 2 args')
        sys.exit(1)
    pp.pprint(client.delete_metadata_from_server(args[0], eval(args[1]),))

elif cmd == 'add_floating_ip_to_server':
    if len(args) != 2:
        print('add_floating_ip_to_server requires 2 args')
        sys.exit(1)
    pp.pprint(client.add_floating_ip_to_server(args[0], args[1],))

elif cmd == 'create_connection':
    if len(args) != 5:
        print('create_connection requires 5 args')
        sys.exit(1)
    pp.pprint(client.create_connection(args[0], args[1], args[2], args[3], args[4],))

elif cmd == 'start_server':
    if len(args) != 5:
        print('start_server requires 5 args')
        sys.exit(1)
    pp.pprint(client.start_server(args[0], args[1], args[2], args[3], args[4],))

elif cmd == 'get_server':
    if len(args) != 1:
        print('get_server requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_server(args[0],))

elif cmd == 'stop_server':
    if len(args) != 1:
        print('stop_server requires 1 args')
        sys.exit(1)
    pp.pprint(client.stop_server(args[0],))

elif cmd == 'create_snapshot':
    if len(args) != 4:
        print('create_snapshot requires 4 args')
        sys.exit(1)
    pp.pprint(client.create_snapshot(args[0], args[1], args[2], args[3],))

elif cmd == 'get_limits':
    if len(args) != 0:
        print('get_limits requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_limits())

elif cmd == 'delete_image':
    if len(args) != 1:
        print('delete_image requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_image(args[0],))

elif cmd == 'delete_volume_attachment':
    if len(args) != 2:
        print('delete_volume_attachment requires 2 args')
        sys.exit(1)
    pp.pprint(client.delete_volume_attachment(args[0], args[1],))

elif cmd == 'delete_volume':
    if len(args) != 1:
        print('delete_volume requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_volume(args[0],))

elif cmd == 'attach_volume_to_server':
    if len(args) != 2:
        print('attach_volume_to_server requires 2 args')
        sys.exit(1)
    pp.pprint(client.attach_volume_to_server(args[0], args[1],))

elif cmd == 'check_server_status':
    if len(args) != 3:
        print('check_server_status requires 3 args')
        sys.exit(1)
    pp.pprint(client.check_server_status(args[0], eval(args[1]), args[2],))

elif cmd == 'setUserPassword':
    if len(args) != 2:
        print('setUserPassword requires 2 args')
        sys.exit(1)
    pp.pprint(client.setUserPassword(args[0], args[1],))

elif cmd == 'resume_server':
    if len(args) != 1:
        print('resume_server requires 1 args')
        sys.exit(1)
    pp.pprint(client.resume_server(args[0],))

elif cmd == 'create_volume':
    if len(args) != 2:
        print('create_volume requires 2 args')
        sys.exit(1)
    pp.pprint(client.create_volume(args[0], eval(args[1]),))

elif cmd == 'reboot_server':
    if len(args) != 2:
        print('reboot_server requires 2 args')
        sys.exit(1)
    pp.pprint(client.reboot_server(args[0], args[1],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
