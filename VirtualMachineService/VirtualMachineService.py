#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    """
    This VirtualMachiine service deploys methods for creating,deleting,stopping etc. VirtualMachines in Openstack.

    """
    def check_Version(self, version):
        """
        Parameters:
         - version

        """
        pass

    def get_client_version(self):
        """
        Get Client version.
        Returns Version of the client

        """
        pass

    def import_keypair(self, keyname, public_key):
        """
        Import Key to openstack.
        Returns : keypair

        Parameters:
         - keyname: Name for the keypair
         - public_key: The public key

        """
        pass

    def get_ip_ports(self, openstack_id):
        """
        Get Ip and Port of server
        Returns:  {'IP': ip, 'PORT': port,'UDP':udp}

        Parameters:
         - openstack_id: Id of server

        """
        pass

    def get_Flavors(self):
        """
        Get Flavors.
        Returns: List of flavor instances.

        """
        pass

    def get_Images(self):
        """
        Get Images.
        Returns: List of Image instances.

        """
        pass

    def get_Image_with_Tag(self, openstack_id):
        """
        Get an image with tag.
        Returns: Image with tag.

        Parameters:
         - openstack_id

        """
        pass

    def delete_server(self, openstack_id):
        """
        Delete server.
        Returns: True if deleted, False if not

        Parameters:
         - openstack_id: Id of the server.

        """
        pass

    def add_metadata_to_server(self, servername, metadata):
        """
        Parameters:
         - servername
         - metadata

        """
        pass

    def delete_metadata_from_server(self, servername, keys):
        """
        Parameters:
         - servername
         - keys

        """
        pass

    def add_floating_ip_to_server(self, openstack_id, network):
        """
        Add floating ip to server.
        Returns: the floating ip

        Parameters:
         - openstack_id: Id of the server
         - network: Network name of the network which provides the floating Ip.

        """
        pass

    def create_connection(self, username, password, auth_url, user_domain_name, project_domain_name):
        """
        Create connection to OpenStack.
        Connection instance

        Parameters:
         - username: Name of the OpenStack user.
         - password: Password of the OpenStack user
         - auth_url: Auth Url from OpenStack
         - user_domain_name: Name of the project from the OpenStack user.
        4:string project_name,

        /** Domain name of OpenStack
         - project_domain_name: Project domain name of OpenStack

        """
        pass

    def start_server(self, flavor, image, public_key, servername, metadata, diskspace, volumename):
        """
        Start a new server.

        Parameters:
         - flavor: Name of the  Flavor to use.
         - image: Name of the image to use.
         - public_key: Public Key to use
         - servername: Name for the new server
         - metadata: Metadata for the new instance
         - diskspace: Diskspace in GB for additional volume.
         - volumename: Name of additional Volume

        """
        pass

    def start_server_with_custom_key(self, flavor, image, servername, metadata, diskspace, volumename):
        """
        Start a new server with custom key for ansible.

        Parameters:
         - flavor: Name of the  Flavor to use.
         - image: Name of the image to use.
         - servername: Name for the new server
         - metadata: Metadata for the new instance
         - diskspace: Diskspace in GB for additional volume.
         - volumename: Name of additional Volume

        """
        pass

    def exist_server(self, name):
        """
        Check if there is an instance with name

        Parameters:
         - name

        """
        pass

    def create_and_deploy_playbook(self, public_key, playbooks_information, openstack_id):
        """
        Create and deploy an anaconda ansible playbook

        Parameters:
         - public_key
         - playbooks_information
         - openstack_id

        """
        pass

    def get_playbook_logs(self, openstack_id):
        """
        Get the logs from a playbook run

        Parameters:
         - openstack_id

        """
        pass

    def add_security_group_to_server(self, http, https, udp, server_id):
        """
        Adds a security group to a server

        Parameters:
         - http: If http ports are open
         - https: If https ports are open
         - udp: If udp ports are open
         - server_id: OpenStack id of the server

        """
        pass

    def get_server(self, openstack_id):
        """
        Get a Server.
        Returns: A server instance.

        Parameters:
         - openstack_id: Id of the server.

        """
        pass

    def stop_server(self, openstack_id):
        """
        Stop a Server.
        Returns: True if stopped, False if not.

        Parameters:
         - openstack_id: Id of the server.

        """
        pass

    def create_snapshot(self, openstack_id, name, elixir_id, base_tag, description):
        """
        Create Snapshot.
        Returns: Id of new Snapshot


        Parameters:
         - openstack_id: Id of the server
         - name: Name of new Snapshot
         - elixir_id: Elixir-Id of the user who requested creation of Snapshot
         - base_tag: Tag with which the servers image is also tagged ( for connection information at the webapp)
         - description: Description of the new snapshot

        """
        pass

    def get_limits(self):
        """
        Get Limits of OpenStack Projekt from client.
        Returns: {'maxTotalVolumes': maxTotalVolumes, 'maxTotalVolumeGigabytes': maxTotalVolumeGigabytes,
                  'maxTotalInstances': maxTotalInstances, 'totalRamUsed': totalRamUsed,
                 'totalInstancesUsed': totalInstancesUsed}

        """
        pass

    def delete_image(self, image_id):
        """
        Delete Image.
        Return: True if deleted, False if not

        Parameters:
         - image_id: Id of image

        """
        pass

    def delete_volume_attachment(self, volume_id, server_id):
        """
        Delete volume attachment
        Return: True if deleted, False if not

        Parameters:
         - volume_id: Id of the attached volume
         - server_id: Id of the server where the volume is attached

        """
        pass

    def delete_volume(self, volume_id):
        """
        Delete volume.
        Returns:  True if deleted, False if not

        Parameters:
         - volume_id

        """
        pass

    def attach_volume_to_server(self, openstack_id, volume_id):
        """
        Attach volume to server.
        Returns:  True if attached, False if not

        Parameters:
         - openstack_id: Id of server
         - volume_id: Id of volume

        """
        pass

    def check_server_status(self, openstack_id, diskspace, volume_id):
        """
        Check status of server.
        Returns: server instance

        Parameters:
         - openstack_id: Id of the server
         - diskspace: diskspace of server(volume will be attached if server is active and diskpace >0)
         - volume_id: Id of the volume

        """
        pass

    def setUserPassword(self, user, password):
        """
        Set Password of a User
        Returns: the new password

        Parameters:
         - user: Elixir-Id of the user which wants to set a password
         - password: New password

        """
        pass

    def resume_server(self, openstack_id):
        """
        Resume Server.
        Returns: True if resumed False if not

        Parameters:
         - openstack_id: Id of the server

        """
        pass

    def create_volume(self, volume_name, diskspace, metadata):
        """
        Create volume.
        Returns: Id of new volume

        Parameters:
         - volume_name: Name of volume
         - diskspace: Diskspace in GB for new volume
         - metadata: Metadata for the new volume

        """
        pass

    def reboot_server(self, server_id, reboot_type):
        """
        Reboot server.
        Returns: True if rebooted False if not

        Parameters:
         - server_id: Id of the server
         - reboot_type: HARD or SOFT

        """
        pass


class Client(Iface):
    """
    This VirtualMachiine service deploys methods for creating,deleting,stopping etc. VirtualMachines in Openstack.

    """
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def check_Version(self, version):
        """
        Parameters:
         - version

        """
        self.send_check_Version(version)
        return self.recv_check_Version()

    def send_check_Version(self, version):
        self._oprot.writeMessageBegin('check_Version', TMessageType.CALL, self._seqid)
        args = check_Version_args()
        args.version = version
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_check_Version(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = check_Version_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "check_Version failed: unknown result")

    def get_client_version(self):
        """
        Get Client version.
        Returns Version of the client

        """
        self.send_get_client_version()
        return self.recv_get_client_version()

    def send_get_client_version(self):
        self._oprot.writeMessageBegin('get_client_version', TMessageType.CALL, self._seqid)
        args = get_client_version_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_client_version(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_client_version_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_client_version failed: unknown result")

    def import_keypair(self, keyname, public_key):
        """
        Import Key to openstack.
        Returns : keypair

        Parameters:
         - keyname: Name for the keypair
         - public_key: The public key

        """
        self.send_import_keypair(keyname, public_key)
        return self.recv_import_keypair()

    def send_import_keypair(self, keyname, public_key):
        self._oprot.writeMessageBegin('import_keypair', TMessageType.CALL, self._seqid)
        args = import_keypair_args()
        args.keyname = keyname
        args.public_key = public_key
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_import_keypair(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = import_keypair_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "import_keypair failed: unknown result")

    def get_ip_ports(self, openstack_id):
        """
        Get Ip and Port of server
        Returns:  {'IP': ip, 'PORT': port,'UDP':udp}

        Parameters:
         - openstack_id: Id of server

        """
        self.send_get_ip_ports(openstack_id)
        return self.recv_get_ip_ports()

    def send_get_ip_ports(self, openstack_id):
        self._oprot.writeMessageBegin('get_ip_ports', TMessageType.CALL, self._seqid)
        args = get_ip_ports_args()
        args.openstack_id = openstack_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_ip_ports(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_ip_ports_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_ip_ports failed: unknown result")

    def get_Flavors(self):
        """
        Get Flavors.
        Returns: List of flavor instances.

        """
        self.send_get_Flavors()
        return self.recv_get_Flavors()

    def send_get_Flavors(self):
        self._oprot.writeMessageBegin('get_Flavors', TMessageType.CALL, self._seqid)
        args = get_Flavors_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_Flavors(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_Flavors_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_Flavors failed: unknown result")

    def get_Images(self):
        """
        Get Images.
        Returns: List of Image instances.

        """
        self.send_get_Images()
        return self.recv_get_Images()

    def send_get_Images(self):
        self._oprot.writeMessageBegin('get_Images', TMessageType.CALL, self._seqid)
        args = get_Images_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_Images(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_Images_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_Images failed: unknown result")

    def get_Image_with_Tag(self, openstack_id):
        """
        Get an image with tag.
        Returns: Image with tag.

        Parameters:
         - openstack_id

        """
        self.send_get_Image_with_Tag(openstack_id)
        return self.recv_get_Image_with_Tag()

    def send_get_Image_with_Tag(self, openstack_id):
        self._oprot.writeMessageBegin('get_Image_with_Tag', TMessageType.CALL, self._seqid)
        args = get_Image_with_Tag_args()
        args.openstack_id = openstack_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_Image_with_Tag(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_Image_with_Tag_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_Image_with_Tag failed: unknown result")

    def delete_server(self, openstack_id):
        """
        Delete server.
        Returns: True if deleted, False if not

        Parameters:
         - openstack_id: Id of the server.

        """
        self.send_delete_server(openstack_id)
        return self.recv_delete_server()

    def send_delete_server(self, openstack_id):
        self._oprot.writeMessageBegin('delete_server', TMessageType.CALL, self._seqid)
        args = delete_server_args()
        args.openstack_id = openstack_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_delete_server(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = delete_server_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "delete_server failed: unknown result")

    def add_metadata_to_server(self, servername, metadata):
        """
        Parameters:
         - servername
         - metadata

        """
        self.send_add_metadata_to_server(servername, metadata)
        return self.recv_add_metadata_to_server()

    def send_add_metadata_to_server(self, servername, metadata):
        self._oprot.writeMessageBegin('add_metadata_to_server', TMessageType.CALL, self._seqid)
        args = add_metadata_to_server_args()
        args.servername = servername
        args.metadata = metadata
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_add_metadata_to_server(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = add_metadata_to_server_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "add_metadata_to_server failed: unknown result")

    def delete_metadata_from_server(self, servername, keys):
        """
        Parameters:
         - servername
         - keys

        """
        self.send_delete_metadata_from_server(servername, keys)
        return self.recv_delete_metadata_from_server()

    def send_delete_metadata_from_server(self, servername, keys):
        self._oprot.writeMessageBegin('delete_metadata_from_server', TMessageType.CALL, self._seqid)
        args = delete_metadata_from_server_args()
        args.servername = servername
        args.keys = keys
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_delete_metadata_from_server(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = delete_metadata_from_server_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "delete_metadata_from_server failed: unknown result")

    def add_floating_ip_to_server(self, openstack_id, network):
        """
        Add floating ip to server.
        Returns: the floating ip

        Parameters:
         - openstack_id: Id of the server
         - network: Network name of the network which provides the floating Ip.

        """
        self.send_add_floating_ip_to_server(openstack_id, network)
        return self.recv_add_floating_ip_to_server()

    def send_add_floating_ip_to_server(self, openstack_id, network):
        self._oprot.writeMessageBegin('add_floating_ip_to_server', TMessageType.CALL, self._seqid)
        args = add_floating_ip_to_server_args()
        args.openstack_id = openstack_id
        args.network = network
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_add_floating_ip_to_server(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = add_floating_ip_to_server_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        if result.f is not None:
            raise result.f
        raise TApplicationException(TApplicationException.MISSING_RESULT, "add_floating_ip_to_server failed: unknown result")

    def create_connection(self, username, password, auth_url, user_domain_name, project_domain_name):
        """
        Create connection to OpenStack.
        Connection instance

        Parameters:
         - username: Name of the OpenStack user.
         - password: Password of the OpenStack user
         - auth_url: Auth Url from OpenStack
         - user_domain_name: Name of the project from the OpenStack user.
        4:string project_name,

        /** Domain name of OpenStack
         - project_domain_name: Project domain name of OpenStack

        """
        self.send_create_connection(username, password, auth_url, user_domain_name, project_domain_name)
        return self.recv_create_connection()

    def send_create_connection(self, username, password, auth_url, user_domain_name, project_domain_name):
        self._oprot.writeMessageBegin('create_connection', TMessageType.CALL, self._seqid)
        args = create_connection_args()
        args.username = username
        args.password = password
        args.auth_url = auth_url
        args.user_domain_name = user_domain_name
        args.project_domain_name = project_domain_name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_create_connection(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = create_connection_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "create_connection failed: unknown result")

    def start_server(self, flavor, image, public_key, servername, metadata, diskspace, volumename):
        """
        Start a new server.

        Parameters:
         - flavor: Name of the  Flavor to use.
         - image: Name of the image to use.
         - public_key: Public Key to use
         - servername: Name for the new server
         - metadata: Metadata for the new instance
         - diskspace: Diskspace in GB for additional volume.
         - volumename: Name of additional Volume

        """
        self.send_start_server(flavor, image, public_key, servername, metadata, diskspace, volumename)
        return self.recv_start_server()

    def send_start_server(self, flavor, image, public_key, servername, metadata, diskspace, volumename):
        self._oprot.writeMessageBegin('start_server', TMessageType.CALL, self._seqid)
        args = start_server_args()
        args.flavor = flavor
        args.image = image
        args.public_key = public_key
        args.servername = servername
        args.metadata = metadata
        args.diskspace = diskspace
        args.volumename = volumename
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_start_server(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = start_server_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        if result.r is not None:
            raise result.r
        if result.s is not None:
            raise result.s
        if result.n is not None:
            raise result.n
        if result.i is not None:
            raise result.i
        if result.f is not None:
            raise result.f
        if result.o is not None:
            raise result.o
        raise TApplicationException(TApplicationException.MISSING_RESULT, "start_server failed: unknown result")

    def start_server_with_custom_key(self, flavor, image, servername, metadata, diskspace, volumename):
        """
        Start a new server with custom key for ansible.

        Parameters:
         - flavor: Name of the  Flavor to use.
         - image: Name of the image to use.
         - servername: Name for the new server
         - metadata: Metadata for the new instance
         - diskspace: Diskspace in GB for additional volume.
         - volumename: Name of additional Volume

        """
        self.send_start_server_with_custom_key(flavor, image, servername, metadata, diskspace, volumename)
        return self.recv_start_server_with_custom_key()

    def send_start_server_with_custom_key(self, flavor, image, servername, metadata, diskspace, volumename):
        self._oprot.writeMessageBegin('start_server_with_custom_key', TMessageType.CALL, self._seqid)
        args = start_server_with_custom_key_args()
        args.flavor = flavor
        args.image = image
        args.servername = servername
        args.metadata = metadata
        args.diskspace = diskspace
        args.volumename = volumename
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_start_server_with_custom_key(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = start_server_with_custom_key_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        if result.r is not None:
            raise result.r
        if result.s is not None:
            raise result.s
        if result.n is not None:
            raise result.n
        if result.i is not None:
            raise result.i
        if result.f is not None:
            raise result.f
        if result.o is not None:
            raise result.o
        raise TApplicationException(TApplicationException.MISSING_RESULT, "start_server_with_custom_key failed: unknown result")

    def exist_server(self, name):
        """
        Check if there is an instance with name

        Parameters:
         - name

        """
        self.send_exist_server(name)
        return self.recv_exist_server()

    def send_exist_server(self, name):
        self._oprot.writeMessageBegin('exist_server', TMessageType.CALL, self._seqid)
        args = exist_server_args()
        args.name = name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_exist_server(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = exist_server_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "exist_server failed: unknown result")

    def create_and_deploy_playbook(self, public_key, playbooks_information, openstack_id):
        """
        Create and deploy an anaconda ansible playbook

        Parameters:
         - public_key
         - playbooks_information
         - openstack_id

        """
        self.send_create_and_deploy_playbook(public_key, playbooks_information, openstack_id)
        return self.recv_create_and_deploy_playbook()

    def send_create_and_deploy_playbook(self, public_key, playbooks_information, openstack_id):
        self._oprot.writeMessageBegin('create_and_deploy_playbook', TMessageType.CALL, self._seqid)
        args = create_and_deploy_playbook_args()
        args.public_key = public_key
        args.playbooks_information = playbooks_information
        args.openstack_id = openstack_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_create_and_deploy_playbook(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = create_and_deploy_playbook_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "create_and_deploy_playbook failed: unknown result")

    def get_playbook_logs(self, openstack_id):
        """
        Get the logs from a playbook run

        Parameters:
         - openstack_id

        """
        self.send_get_playbook_logs(openstack_id)
        return self.recv_get_playbook_logs()

    def send_get_playbook_logs(self, openstack_id):
        self._oprot.writeMessageBegin('get_playbook_logs', TMessageType.CALL, self._seqid)
        args = get_playbook_logs_args()
        args.openstack_id = openstack_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_playbook_logs(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_playbook_logs_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_playbook_logs failed: unknown result")

    def add_security_group_to_server(self, http, https, udp, server_id):
        """
        Adds a security group to a server

        Parameters:
         - http: If http ports are open
         - https: If https ports are open
         - udp: If udp ports are open
         - server_id: OpenStack id of the server

        """
        self.send_add_security_group_to_server(http, https, udp, server_id)
        return self.recv_add_security_group_to_server()

    def send_add_security_group_to_server(self, http, https, udp, server_id):
        self._oprot.writeMessageBegin('add_security_group_to_server', TMessageType.CALL, self._seqid)
        args = add_security_group_to_server_args()
        args.http = http
        args.https = https
        args.udp = udp
        args.server_id = server_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_add_security_group_to_server(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = add_security_group_to_server_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.r is not None:
            raise result.r
        if result.s is not None:
            raise result.s
        raise TApplicationException(TApplicationException.MISSING_RESULT, "add_security_group_to_server failed: unknown result")

    def get_server(self, openstack_id):
        """
        Get a Server.
        Returns: A server instance.

        Parameters:
         - openstack_id: Id of the server.

        """
        self.send_get_server(openstack_id)
        return self.recv_get_server()

    def send_get_server(self, openstack_id):
        self._oprot.writeMessageBegin('get_server', TMessageType.CALL, self._seqid)
        args = get_server_args()
        args.openstack_id = openstack_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_server(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_server_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_server failed: unknown result")

    def stop_server(self, openstack_id):
        """
        Stop a Server.
        Returns: True if stopped, False if not.

        Parameters:
         - openstack_id: Id of the server.

        """
        self.send_stop_server(openstack_id)
        return self.recv_stop_server()

    def send_stop_server(self, openstack_id):
        self._oprot.writeMessageBegin('stop_server', TMessageType.CALL, self._seqid)
        args = stop_server_args()
        args.openstack_id = openstack_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_stop_server(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = stop_server_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "stop_server failed: unknown result")

    def create_snapshot(self, openstack_id, name, elixir_id, base_tag, description):
        """
        Create Snapshot.
        Returns: Id of new Snapshot


        Parameters:
         - openstack_id: Id of the server
         - name: Name of new Snapshot
         - elixir_id: Elixir-Id of the user who requested creation of Snapshot
         - base_tag: Tag with which the servers image is also tagged ( for connection information at the webapp)
         - description: Description of the new snapshot

        """
        self.send_create_snapshot(openstack_id, name, elixir_id, base_tag, description)
        return self.recv_create_snapshot()

    def send_create_snapshot(self, openstack_id, name, elixir_id, base_tag, description):
        self._oprot.writeMessageBegin('create_snapshot', TMessageType.CALL, self._seqid)
        args = create_snapshot_args()
        args.openstack_id = openstack_id
        args.name = name
        args.elixir_id = elixir_id
        args.base_tag = base_tag
        args.description = description
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_create_snapshot(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = create_snapshot_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "create_snapshot failed: unknown result")

    def get_limits(self):
        """
        Get Limits of OpenStack Projekt from client.
        Returns: {'maxTotalVolumes': maxTotalVolumes, 'maxTotalVolumeGigabytes': maxTotalVolumeGigabytes,
                  'maxTotalInstances': maxTotalInstances, 'totalRamUsed': totalRamUsed,
                 'totalInstancesUsed': totalInstancesUsed}

        """
        self.send_get_limits()
        return self.recv_get_limits()

    def send_get_limits(self):
        self._oprot.writeMessageBegin('get_limits', TMessageType.CALL, self._seqid)
        args = get_limits_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_limits(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_limits_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_limits failed: unknown result")

    def delete_image(self, image_id):
        """
        Delete Image.
        Return: True if deleted, False if not

        Parameters:
         - image_id: Id of image

        """
        self.send_delete_image(image_id)
        return self.recv_delete_image()

    def send_delete_image(self, image_id):
        self._oprot.writeMessageBegin('delete_image', TMessageType.CALL, self._seqid)
        args = delete_image_args()
        args.image_id = image_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_delete_image(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = delete_image_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "delete_image failed: unknown result")

    def delete_volume_attachment(self, volume_id, server_id):
        """
        Delete volume attachment
        Return: True if deleted, False if not

        Parameters:
         - volume_id: Id of the attached volume
         - server_id: Id of the server where the volume is attached

        """
        self.send_delete_volume_attachment(volume_id, server_id)
        return self.recv_delete_volume_attachment()

    def send_delete_volume_attachment(self, volume_id, server_id):
        self._oprot.writeMessageBegin('delete_volume_attachment', TMessageType.CALL, self._seqid)
        args = delete_volume_attachment_args()
        args.volume_id = volume_id
        args.server_id = server_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_delete_volume_attachment(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = delete_volume_attachment_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "delete_volume_attachment failed: unknown result")

    def delete_volume(self, volume_id):
        """
        Delete volume.
        Returns:  True if deleted, False if not

        Parameters:
         - volume_id

        """
        self.send_delete_volume(volume_id)
        return self.recv_delete_volume()

    def send_delete_volume(self, volume_id):
        self._oprot.writeMessageBegin('delete_volume', TMessageType.CALL, self._seqid)
        args = delete_volume_args()
        args.volume_id = volume_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_delete_volume(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = delete_volume_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "delete_volume failed: unknown result")

    def attach_volume_to_server(self, openstack_id, volume_id):
        """
        Attach volume to server.
        Returns:  True if attached, False if not

        Parameters:
         - openstack_id: Id of server
         - volume_id: Id of volume

        """
        self.send_attach_volume_to_server(openstack_id, volume_id)
        return self.recv_attach_volume_to_server()

    def send_attach_volume_to_server(self, openstack_id, volume_id):
        self._oprot.writeMessageBegin('attach_volume_to_server', TMessageType.CALL, self._seqid)
        args = attach_volume_to_server_args()
        args.openstack_id = openstack_id
        args.volume_id = volume_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_attach_volume_to_server(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = attach_volume_to_server_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "attach_volume_to_server failed: unknown result")

    def check_server_status(self, openstack_id, diskspace, volume_id):
        """
        Check status of server.
        Returns: server instance

        Parameters:
         - openstack_id: Id of the server
         - diskspace: diskspace of server(volume will be attached if server is active and diskpace >0)
         - volume_id: Id of the volume

        """
        self.send_check_server_status(openstack_id, diskspace, volume_id)
        return self.recv_check_server_status()

    def send_check_server_status(self, openstack_id, diskspace, volume_id):
        self._oprot.writeMessageBegin('check_server_status', TMessageType.CALL, self._seqid)
        args = check_server_status_args()
        args.openstack_id = openstack_id
        args.diskspace = diskspace
        args.volume_id = volume_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_check_server_status(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = check_server_status_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        if result.r is not None:
            raise result.r
        raise TApplicationException(TApplicationException.MISSING_RESULT, "check_server_status failed: unknown result")

    def setUserPassword(self, user, password):
        """
        Set Password of a User
        Returns: the new password

        Parameters:
         - user: Elixir-Id of the user which wants to set a password
         - password: New password

        """
        self.send_setUserPassword(user, password)
        return self.recv_setUserPassword()

    def send_setUserPassword(self, user, password):
        self._oprot.writeMessageBegin('setUserPassword', TMessageType.CALL, self._seqid)
        args = setUserPassword_args()
        args.user = user
        args.password = password
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_setUserPassword(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = setUserPassword_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "setUserPassword failed: unknown result")

    def resume_server(self, openstack_id):
        """
        Resume Server.
        Returns: True if resumed False if not

        Parameters:
         - openstack_id: Id of the server

        """
        self.send_resume_server(openstack_id)
        return self.recv_resume_server()

    def send_resume_server(self, openstack_id):
        self._oprot.writeMessageBegin('resume_server', TMessageType.CALL, self._seqid)
        args = resume_server_args()
        args.openstack_id = openstack_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_resume_server(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = resume_server_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "resume_server failed: unknown result")

    def create_volume(self, volume_name, diskspace, metadata):
        """
        Create volume.
        Returns: Id of new volume

        Parameters:
         - volume_name: Name of volume
         - diskspace: Diskspace in GB for new volume
         - metadata: Metadata for the new volume

        """
        self.send_create_volume(volume_name, diskspace, metadata)
        return self.recv_create_volume()

    def send_create_volume(self, volume_name, diskspace, metadata):
        self._oprot.writeMessageBegin('create_volume', TMessageType.CALL, self._seqid)
        args = create_volume_args()
        args.volume_name = volume_name
        args.diskspace = diskspace
        args.metadata = metadata
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_create_volume(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = create_volume_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.r is not None:
            raise result.r
        raise TApplicationException(TApplicationException.MISSING_RESULT, "create_volume failed: unknown result")

    def reboot_server(self, server_id, reboot_type):
        """
        Reboot server.
        Returns: True if rebooted False if not

        Parameters:
         - server_id: Id of the server
         - reboot_type: HARD or SOFT

        """
        self.send_reboot_server(server_id, reboot_type)
        return self.recv_reboot_server()

    def send_reboot_server(self, server_id, reboot_type):
        self._oprot.writeMessageBegin('reboot_server', TMessageType.CALL, self._seqid)
        args = reboot_server_args()
        args.server_id = server_id
        args.reboot_type = reboot_type
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_reboot_server(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = reboot_server_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "reboot_server failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["check_Version"] = Processor.process_check_Version
        self._processMap["get_client_version"] = Processor.process_get_client_version
        self._processMap["import_keypair"] = Processor.process_import_keypair
        self._processMap["get_ip_ports"] = Processor.process_get_ip_ports
        self._processMap["get_Flavors"] = Processor.process_get_Flavors
        self._processMap["get_Images"] = Processor.process_get_Images
        self._processMap["get_Image_with_Tag"] = Processor.process_get_Image_with_Tag
        self._processMap["delete_server"] = Processor.process_delete_server
        self._processMap["add_metadata_to_server"] = Processor.process_add_metadata_to_server
        self._processMap["delete_metadata_from_server"] = Processor.process_delete_metadata_from_server
        self._processMap["add_floating_ip_to_server"] = Processor.process_add_floating_ip_to_server
        self._processMap["create_connection"] = Processor.process_create_connection
        self._processMap["start_server"] = Processor.process_start_server
        self._processMap["start_server_with_custom_key"] = Processor.process_start_server_with_custom_key
        self._processMap["exist_server"] = Processor.process_exist_server
        self._processMap["create_and_deploy_playbook"] = Processor.process_create_and_deploy_playbook
        self._processMap["get_playbook_logs"] = Processor.process_get_playbook_logs
        self._processMap["add_security_group_to_server"] = Processor.process_add_security_group_to_server
        self._processMap["get_server"] = Processor.process_get_server
        self._processMap["stop_server"] = Processor.process_stop_server
        self._processMap["create_snapshot"] = Processor.process_create_snapshot
        self._processMap["get_limits"] = Processor.process_get_limits
        self._processMap["delete_image"] = Processor.process_delete_image
        self._processMap["delete_volume_attachment"] = Processor.process_delete_volume_attachment
        self._processMap["delete_volume"] = Processor.process_delete_volume
        self._processMap["attach_volume_to_server"] = Processor.process_attach_volume_to_server
        self._processMap["check_server_status"] = Processor.process_check_server_status
        self._processMap["setUserPassword"] = Processor.process_setUserPassword
        self._processMap["resume_server"] = Processor.process_resume_server
        self._processMap["create_volume"] = Processor.process_create_volume
        self._processMap["reboot_server"] = Processor.process_reboot_server

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_check_Version(self, seqid, iprot, oprot):
        args = check_Version_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = check_Version_result()
        try:
            result.success = self._handler.check_Version(args.version)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("check_Version", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_client_version(self, seqid, iprot, oprot):
        args = get_client_version_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_client_version_result()
        try:
            result.success = self._handler.get_client_version()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_client_version", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_import_keypair(self, seqid, iprot, oprot):
        args = import_keypair_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = import_keypair_result()
        try:
            result.success = self._handler.import_keypair(args.keyname, args.public_key)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("import_keypair", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_ip_ports(self, seqid, iprot, oprot):
        args = get_ip_ports_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_ip_ports_result()
        try:
            result.success = self._handler.get_ip_ports(args.openstack_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_ip_ports", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_Flavors(self, seqid, iprot, oprot):
        args = get_Flavors_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_Flavors_result()
        try:
            result.success = self._handler.get_Flavors()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_Flavors", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_Images(self, seqid, iprot, oprot):
        args = get_Images_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_Images_result()
        try:
            result.success = self._handler.get_Images()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_Images", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_Image_with_Tag(self, seqid, iprot, oprot):
        args = get_Image_with_Tag_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_Image_with_Tag_result()
        try:
            result.success = self._handler.get_Image_with_Tag(args.openstack_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_Image_with_Tag", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_delete_server(self, seqid, iprot, oprot):
        args = delete_server_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = delete_server_result()
        try:
            result.success = self._handler.delete_server(args.openstack_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except serverNotFoundException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("delete_server", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_add_metadata_to_server(self, seqid, iprot, oprot):
        args = add_metadata_to_server_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = add_metadata_to_server_result()
        try:
            result.success = self._handler.add_metadata_to_server(args.servername, args.metadata)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except serverNotFoundException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("add_metadata_to_server", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_delete_metadata_from_server(self, seqid, iprot, oprot):
        args = delete_metadata_from_server_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = delete_metadata_from_server_result()
        try:
            result.success = self._handler.delete_metadata_from_server(args.servername, args.keys)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except serverNotFoundException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("delete_metadata_from_server", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_add_floating_ip_to_server(self, seqid, iprot, oprot):
        args = add_floating_ip_to_server_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = add_floating_ip_to_server_result()
        try:
            result.success = self._handler.add_floating_ip_to_server(args.openstack_id, args.network)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except serverNotFoundException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except networkNotFoundException as f:
            msg_type = TMessageType.REPLY
            result.f = f
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("add_floating_ip_to_server", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_create_connection(self, seqid, iprot, oprot):
        args = create_connection_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = create_connection_result()
        try:
            result.success = self._handler.create_connection(args.username, args.password, args.auth_url, args.user_domain_name, args.project_domain_name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except authenticationException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("create_connection", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_start_server(self, seqid, iprot, oprot):
        args = start_server_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = start_server_result()
        try:
            result.success = self._handler.start_server(args.flavor, args.image, args.public_key, args.servername, args.metadata, args.diskspace, args.volumename)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except nameException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except ressourceException as r:
            msg_type = TMessageType.REPLY
            result.r = r
        except serverNotFoundException as s:
            msg_type = TMessageType.REPLY
            result.s = s
        except networkNotFoundException as n:
            msg_type = TMessageType.REPLY
            result.n = n
        except imageNotFoundException as i:
            msg_type = TMessageType.REPLY
            result.i = i
        except flavorNotFoundException as f:
            msg_type = TMessageType.REPLY
            result.f = f
        except otherException as o:
            msg_type = TMessageType.REPLY
            result.o = o
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("start_server", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_start_server_with_custom_key(self, seqid, iprot, oprot):
        args = start_server_with_custom_key_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = start_server_with_custom_key_result()
        try:
            result.success = self._handler.start_server_with_custom_key(args.flavor, args.image, args.servername, args.metadata, args.diskspace, args.volumename)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except nameException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except ressourceException as r:
            msg_type = TMessageType.REPLY
            result.r = r
        except serverNotFoundException as s:
            msg_type = TMessageType.REPLY
            result.s = s
        except networkNotFoundException as n:
            msg_type = TMessageType.REPLY
            result.n = n
        except imageNotFoundException as i:
            msg_type = TMessageType.REPLY
            result.i = i
        except flavorNotFoundException as f:
            msg_type = TMessageType.REPLY
            result.f = f
        except otherException as o:
            msg_type = TMessageType.REPLY
            result.o = o
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("start_server_with_custom_key", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_exist_server(self, seqid, iprot, oprot):
        args = exist_server_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = exist_server_result()
        try:
            result.success = self._handler.exist_server(args.name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("exist_server", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_create_and_deploy_playbook(self, seqid, iprot, oprot):
        args = create_and_deploy_playbook_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = create_and_deploy_playbook_result()
        try:
            result.success = self._handler.create_and_deploy_playbook(args.public_key, args.playbooks_information, args.openstack_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("create_and_deploy_playbook", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_playbook_logs(self, seqid, iprot, oprot):
        args = get_playbook_logs_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_playbook_logs_result()
        try:
            result.success = self._handler.get_playbook_logs(args.openstack_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_playbook_logs", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_add_security_group_to_server(self, seqid, iprot, oprot):
        args = add_security_group_to_server_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = add_security_group_to_server_result()
        try:
            result.success = self._handler.add_security_group_to_server(args.http, args.https, args.udp, args.server_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ressourceException as r:
            msg_type = TMessageType.REPLY
            result.r = r
        except serverNotFoundException as s:
            msg_type = TMessageType.REPLY
            result.s = s
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("add_security_group_to_server", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_server(self, seqid, iprot, oprot):
        args = get_server_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_server_result()
        try:
            result.success = self._handler.get_server(args.openstack_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except serverNotFoundException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_server", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_stop_server(self, seqid, iprot, oprot):
        args = stop_server_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = stop_server_result()
        try:
            result.success = self._handler.stop_server(args.openstack_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except serverNotFoundException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("stop_server", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_create_snapshot(self, seqid, iprot, oprot):
        args = create_snapshot_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = create_snapshot_result()
        try:
            result.success = self._handler.create_snapshot(args.openstack_id, args.name, args.elixir_id, args.base_tag, args.description)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except serverNotFoundException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("create_snapshot", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_limits(self, seqid, iprot, oprot):
        args = get_limits_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_limits_result()
        try:
            result.success = self._handler.get_limits()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_limits", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_delete_image(self, seqid, iprot, oprot):
        args = delete_image_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = delete_image_result()
        try:
            result.success = self._handler.delete_image(args.image_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except imageNotFoundException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("delete_image", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_delete_volume_attachment(self, seqid, iprot, oprot):
        args = delete_volume_attachment_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = delete_volume_attachment_result()
        try:
            result.success = self._handler.delete_volume_attachment(args.volume_id, args.server_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except serverNotFoundException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("delete_volume_attachment", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_delete_volume(self, seqid, iprot, oprot):
        args = delete_volume_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = delete_volume_result()
        try:
            result.success = self._handler.delete_volume(args.volume_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("delete_volume", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_attach_volume_to_server(self, seqid, iprot, oprot):
        args = attach_volume_to_server_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = attach_volume_to_server_result()
        try:
            result.success = self._handler.attach_volume_to_server(args.openstack_id, args.volume_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except serverNotFoundException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("attach_volume_to_server", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_check_server_status(self, seqid, iprot, oprot):
        args = check_server_status_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = check_server_status_result()
        try:
            result.success = self._handler.check_server_status(args.openstack_id, args.diskspace, args.volume_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except serverNotFoundException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except ressourceException as r:
            msg_type = TMessageType.REPLY
            result.r = r
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("check_server_status", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_setUserPassword(self, seqid, iprot, oprot):
        args = setUserPassword_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = setUserPassword_result()
        try:
            result.success = self._handler.setUserPassword(args.user, args.password)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except otherException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("setUserPassword", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_resume_server(self, seqid, iprot, oprot):
        args = resume_server_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = resume_server_result()
        try:
            result.success = self._handler.resume_server(args.openstack_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except serverNotFoundException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("resume_server", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_create_volume(self, seqid, iprot, oprot):
        args = create_volume_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = create_volume_result()
        try:
            result.success = self._handler.create_volume(args.volume_name, args.diskspace, args.metadata)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ressourceException as r:
            msg_type = TMessageType.REPLY
            result.r = r
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("create_volume", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_reboot_server(self, seqid, iprot, oprot):
        args = reboot_server_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = reboot_server_result()
        try:
            result.success = self._handler.reboot_server(args.server_id, args.reboot_type)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except serverNotFoundException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("reboot_server", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class check_Version_args(object):
    """
    Attributes:
     - version

    """


    def __init__(self, version=None,):
        self.version = version

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.version = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('check_Version_args')
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.DOUBLE, 1)
            oprot.writeDouble(self.version)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(check_Version_args)
check_Version_args.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'version', None, None, ),  # 1
)


class check_Version_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('check_Version_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(check_Version_result)
check_Version_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class get_client_version_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_client_version_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_client_version_args)
get_client_version_args.thrift_spec = (
)


class get_client_version_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_client_version_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_client_version_result)
get_client_version_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
)


class import_keypair_args(object):
    """
    Attributes:
     - keyname: Name for the keypair
     - public_key: The public key

    """


    def __init__(self, keyname=None, public_key=None,):
        self.keyname = keyname
        self.public_key = public_key

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.keyname = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.public_key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('import_keypair_args')
        if self.keyname is not None:
            oprot.writeFieldBegin('keyname', TType.STRING, 1)
            oprot.writeString(self.keyname.encode('utf-8') if sys.version_info[0] == 2 else self.keyname)
            oprot.writeFieldEnd()
        if self.public_key is not None:
            oprot.writeFieldBegin('public_key', TType.STRING, 2)
            oprot.writeString(self.public_key.encode('utf-8') if sys.version_info[0] == 2 else self.public_key)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(import_keypair_args)
import_keypair_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'keyname', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'public_key', 'UTF8', None, ),  # 2
)


class import_keypair_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('import_keypair_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(import_keypair_result)
import_keypair_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
)


class get_ip_ports_args(object):
    """
    Attributes:
     - openstack_id: Id of server

    """


    def __init__(self, openstack_id=None,):
        self.openstack_id = openstack_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.openstack_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_ip_ports_args')
        if self.openstack_id is not None:
            oprot.writeFieldBegin('openstack_id', TType.STRING, 1)
            oprot.writeString(self.openstack_id.encode('utf-8') if sys.version_info[0] == 2 else self.openstack_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_ip_ports_args)
get_ip_ports_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'openstack_id', 'UTF8', None, ),  # 1
)


class get_ip_ports_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.MAP:
                    self.success = {}
                    (_ktype33, _vtype34, _size32) = iprot.readMapBegin()
                    for _i36 in range(_size32):
                        _key37 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val38 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.success[_key37] = _val38
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_ip_ports_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.MAP, 0)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
            for kiter39, viter40 in self.success.items():
                oprot.writeString(kiter39.encode('utf-8') if sys.version_info[0] == 2 else kiter39)
                oprot.writeString(viter40.encode('utf-8') if sys.version_info[0] == 2 else viter40)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_ip_ports_result)
get_ip_ports_result.thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 0
)


class get_Flavors_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_Flavors_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_Flavors_args)
get_Flavors_args.thrift_spec = (
)


class get_Flavors_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype44, _size41) = iprot.readListBegin()
                    for _i45 in range(_size41):
                        _elem46 = Flavor()
                        _elem46.read(iprot)
                        self.success.append(_elem46)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_Flavors_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter47 in self.success:
                iter47.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_Flavors_result)
get_Flavors_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [Flavor, None], False), None, ),  # 0
)


class get_Images_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_Images_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_Images_args)
get_Images_args.thrift_spec = (
)


class get_Images_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype51, _size48) = iprot.readListBegin()
                    for _i52 in range(_size48):
                        _elem53 = Image()
                        _elem53.read(iprot)
                        self.success.append(_elem53)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_Images_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter54 in self.success:
                iter54.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_Images_result)
get_Images_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [Image, None], False), None, ),  # 0
)


class get_Image_with_Tag_args(object):
    """
    Attributes:
     - openstack_id

    """


    def __init__(self, openstack_id=None,):
        self.openstack_id = openstack_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.openstack_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_Image_with_Tag_args')
        if self.openstack_id is not None:
            oprot.writeFieldBegin('openstack_id', TType.STRING, 1)
            oprot.writeString(self.openstack_id.encode('utf-8') if sys.version_info[0] == 2 else self.openstack_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_Image_with_Tag_args)
get_Image_with_Tag_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'openstack_id', 'UTF8', None, ),  # 1
)


class get_Image_with_Tag_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Image()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_Image_with_Tag_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_Image_with_Tag_result)
get_Image_with_Tag_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Image, None], None, ),  # 0
)


class delete_server_args(object):
    """
    Attributes:
     - openstack_id: Id of the server.

    """


    def __init__(self, openstack_id=None,):
        self.openstack_id = openstack_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.openstack_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('delete_server_args')
        if self.openstack_id is not None:
            oprot.writeFieldBegin('openstack_id', TType.STRING, 1)
            oprot.writeString(self.openstack_id.encode('utf-8') if sys.version_info[0] == 2 else self.openstack_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(delete_server_args)
delete_server_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'openstack_id', 'UTF8', None, ),  # 1
)


class delete_server_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = serverNotFoundException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('delete_server_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(delete_server_result)
delete_server_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [serverNotFoundException, None], None, ),  # 1
)


class add_metadata_to_server_args(object):
    """
    Attributes:
     - servername
     - metadata

    """


    def __init__(self, servername=None, metadata=None,):
        self.servername = servername
        self.metadata = metadata

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.servername = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.metadata = {}
                    (_ktype56, _vtype57, _size55) = iprot.readMapBegin()
                    for _i59 in range(_size55):
                        _key60 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val61 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.metadata[_key60] = _val61
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_metadata_to_server_args')
        if self.servername is not None:
            oprot.writeFieldBegin('servername', TType.STRING, 1)
            oprot.writeString(self.servername.encode('utf-8') if sys.version_info[0] == 2 else self.servername)
            oprot.writeFieldEnd()
        if self.metadata is not None:
            oprot.writeFieldBegin('metadata', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.metadata))
            for kiter62, viter63 in self.metadata.items():
                oprot.writeString(kiter62.encode('utf-8') if sys.version_info[0] == 2 else kiter62)
                oprot.writeString(viter63.encode('utf-8') if sys.version_info[0] == 2 else viter63)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(add_metadata_to_server_args)
add_metadata_to_server_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'servername', 'UTF8', None, ),  # 1
    (2, TType.MAP, 'metadata', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
)


class add_metadata_to_server_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.MAP:
                    self.success = {}
                    (_ktype65, _vtype66, _size64) = iprot.readMapBegin()
                    for _i68 in range(_size64):
                        _key69 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val70 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.success[_key69] = _val70
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = serverNotFoundException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_metadata_to_server_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.MAP, 0)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
            for kiter71, viter72 in self.success.items():
                oprot.writeString(kiter71.encode('utf-8') if sys.version_info[0] == 2 else kiter71)
                oprot.writeString(viter72.encode('utf-8') if sys.version_info[0] == 2 else viter72)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(add_metadata_to_server_result)
add_metadata_to_server_result.thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 0
    (1, TType.STRUCT, 'e', [serverNotFoundException, None], None, ),  # 1
)


class delete_metadata_from_server_args(object):
    """
    Attributes:
     - servername
     - keys

    """


    def __init__(self, servername=None, keys=None,):
        self.servername = servername
        self.keys = keys

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.servername = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.SET:
                    self.keys = set()
                    (_etype76, _size73) = iprot.readSetBegin()
                    for _i77 in range(_size73):
                        _elem78 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.keys.add(_elem78)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('delete_metadata_from_server_args')
        if self.servername is not None:
            oprot.writeFieldBegin('servername', TType.STRING, 1)
            oprot.writeString(self.servername.encode('utf-8') if sys.version_info[0] == 2 else self.servername)
            oprot.writeFieldEnd()
        if self.keys is not None:
            oprot.writeFieldBegin('keys', TType.SET, 2)
            oprot.writeSetBegin(TType.STRING, len(self.keys))
            for iter79 in self.keys:
                oprot.writeString(iter79.encode('utf-8') if sys.version_info[0] == 2 else iter79)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(delete_metadata_from_server_args)
delete_metadata_from_server_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'servername', 'UTF8', None, ),  # 1
    (2, TType.SET, 'keys', (TType.STRING, 'UTF8', False), None, ),  # 2
)


class delete_metadata_from_server_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.SET:
                    self.success = set()
                    (_etype83, _size80) = iprot.readSetBegin()
                    for _i84 in range(_size80):
                        _elem85 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.success.add(_elem85)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = serverNotFoundException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('delete_metadata_from_server_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.SET, 0)
            oprot.writeSetBegin(TType.STRING, len(self.success))
            for iter86 in self.success:
                oprot.writeString(iter86.encode('utf-8') if sys.version_info[0] == 2 else iter86)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(delete_metadata_from_server_result)
delete_metadata_from_server_result.thrift_spec = (
    (0, TType.SET, 'success', (TType.STRING, 'UTF8', False), None, ),  # 0
    (1, TType.STRUCT, 'e', [serverNotFoundException, None], None, ),  # 1
)


class add_floating_ip_to_server_args(object):
    """
    Attributes:
     - openstack_id: Id of the server
     - network: Network name of the network which provides the floating Ip.

    """


    def __init__(self, openstack_id=None, network=None,):
        self.openstack_id = openstack_id
        self.network = network

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.openstack_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.network = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_floating_ip_to_server_args')
        if self.openstack_id is not None:
            oprot.writeFieldBegin('openstack_id', TType.STRING, 1)
            oprot.writeString(self.openstack_id.encode('utf-8') if sys.version_info[0] == 2 else self.openstack_id)
            oprot.writeFieldEnd()
        if self.network is not None:
            oprot.writeFieldBegin('network', TType.STRING, 2)
            oprot.writeString(self.network.encode('utf-8') if sys.version_info[0] == 2 else self.network)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(add_floating_ip_to_server_args)
add_floating_ip_to_server_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'openstack_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'network', 'UTF8', None, ),  # 2
)


class add_floating_ip_to_server_result(object):
    """
    Attributes:
     - success
     - e
     - f

    """


    def __init__(self, success=None, e=None, f=None,):
        self.success = success
        self.e = e
        self.f = f

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = serverNotFoundException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.f = networkNotFoundException()
                    self.f.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_floating_ip_to_server_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        if self.f is not None:
            oprot.writeFieldBegin('f', TType.STRUCT, 2)
            self.f.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(add_floating_ip_to_server_result)
add_floating_ip_to_server_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
    (1, TType.STRUCT, 'e', [serverNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'f', [networkNotFoundException, None], None, ),  # 2
)


class create_connection_args(object):
    """
    Attributes:
     - username: Name of the OpenStack user.
     - password: Password of the OpenStack user
     - auth_url: Auth Url from OpenStack
     - user_domain_name: Name of the project from the OpenStack user.
    4:string project_name,

    /** Domain name of OpenStack
     - project_domain_name: Project domain name of OpenStack

    """


    def __init__(self, username=None, password=None, auth_url=None, user_domain_name=None, project_domain_name=None,):
        self.username = username
        self.password = password
        self.auth_url = auth_url
        self.user_domain_name = user_domain_name
        self.project_domain_name = project_domain_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.auth_url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.user_domain_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.project_domain_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_connection_args')
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 1)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 2)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.auth_url is not None:
            oprot.writeFieldBegin('auth_url', TType.STRING, 3)
            oprot.writeString(self.auth_url.encode('utf-8') if sys.version_info[0] == 2 else self.auth_url)
            oprot.writeFieldEnd()
        if self.user_domain_name is not None:
            oprot.writeFieldBegin('user_domain_name', TType.STRING, 5)
            oprot.writeString(self.user_domain_name.encode('utf-8') if sys.version_info[0] == 2 else self.user_domain_name)
            oprot.writeFieldEnd()
        if self.project_domain_name is not None:
            oprot.writeFieldBegin('project_domain_name', TType.STRING, 6)
            oprot.writeString(self.project_domain_name.encode('utf-8') if sys.version_info[0] == 2 else self.project_domain_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_connection_args)
create_connection_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'username', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'password', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'auth_url', 'UTF8', None, ),  # 3
    None,  # 4
    (5, TType.STRING, 'user_domain_name', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'project_domain_name', 'UTF8', None, ),  # 6
)


class create_connection_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = authenticationException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_connection_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_connection_result)
create_connection_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [authenticationException, None], None, ),  # 1
)


class start_server_args(object):
    """
    Attributes:
     - flavor: Name of the  Flavor to use.
     - image: Name of the image to use.
     - public_key: Public Key to use
     - servername: Name for the new server
     - metadata: Metadata for the new instance
     - diskspace: Diskspace in GB for additional volume.
     - volumename: Name of additional Volume

    """


    def __init__(self, flavor=None, image=None, public_key=None, servername=None, metadata=None, diskspace=None, volumename=None,):
        self.flavor = flavor
        self.image = image
        self.public_key = public_key
        self.servername = servername
        self.metadata = metadata
        self.diskspace = diskspace
        self.volumename = volumename

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.flavor = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.image = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.public_key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.servername = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.MAP:
                    self.metadata = {}
                    (_ktype88, _vtype89, _size87) = iprot.readMapBegin()
                    for _i91 in range(_size87):
                        _key92 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val93 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.metadata[_key92] = _val93
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.diskspace = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.volumename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('start_server_args')
        if self.flavor is not None:
            oprot.writeFieldBegin('flavor', TType.STRING, 1)
            oprot.writeString(self.flavor.encode('utf-8') if sys.version_info[0] == 2 else self.flavor)
            oprot.writeFieldEnd()
        if self.image is not None:
            oprot.writeFieldBegin('image', TType.STRING, 2)
            oprot.writeString(self.image.encode('utf-8') if sys.version_info[0] == 2 else self.image)
            oprot.writeFieldEnd()
        if self.public_key is not None:
            oprot.writeFieldBegin('public_key', TType.STRING, 3)
            oprot.writeString(self.public_key.encode('utf-8') if sys.version_info[0] == 2 else self.public_key)
            oprot.writeFieldEnd()
        if self.servername is not None:
            oprot.writeFieldBegin('servername', TType.STRING, 4)
            oprot.writeString(self.servername.encode('utf-8') if sys.version_info[0] == 2 else self.servername)
            oprot.writeFieldEnd()
        if self.metadata is not None:
            oprot.writeFieldBegin('metadata', TType.MAP, 5)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.metadata))
            for kiter94, viter95 in self.metadata.items():
                oprot.writeString(kiter94.encode('utf-8') if sys.version_info[0] == 2 else kiter94)
                oprot.writeString(viter95.encode('utf-8') if sys.version_info[0] == 2 else viter95)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.diskspace is not None:
            oprot.writeFieldBegin('diskspace', TType.STRING, 6)
            oprot.writeString(self.diskspace.encode('utf-8') if sys.version_info[0] == 2 else self.diskspace)
            oprot.writeFieldEnd()
        if self.volumename is not None:
            oprot.writeFieldBegin('volumename', TType.STRING, 7)
            oprot.writeString(self.volumename.encode('utf-8') if sys.version_info[0] == 2 else self.volumename)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(start_server_args)
start_server_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'flavor', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'image', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'public_key', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'servername', 'UTF8', None, ),  # 4
    (5, TType.MAP, 'metadata', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.STRING, 'diskspace', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'volumename', 'UTF8', None, ),  # 7
)


class start_server_result(object):
    """
    Attributes:
     - success
     - e
     - r
     - s
     - n
     - i
     - f
     - o

    """


    def __init__(self, success=None, e=None, r=None, s=None, n=None, i=None, f=None, o=None,):
        self.success = success
        self.e = e
        self.r = r
        self.s = s
        self.n = n
        self.i = i
        self.f = f
        self.o = o

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.MAP:
                    self.success = {}
                    (_ktype97, _vtype98, _size96) = iprot.readMapBegin()
                    for _i100 in range(_size96):
                        _key101 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val102 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.success[_key101] = _val102
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = nameException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.r = ressourceException()
                    self.r.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.s = serverNotFoundException()
                    self.s.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.n = networkNotFoundException()
                    self.n.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.i = imageNotFoundException()
                    self.i.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.f = flavorNotFoundException()
                    self.f.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.o = otherException()
                    self.o.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('start_server_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.MAP, 0)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
            for kiter103, viter104 in self.success.items():
                oprot.writeString(kiter103.encode('utf-8') if sys.version_info[0] == 2 else kiter103)
                oprot.writeString(viter104.encode('utf-8') if sys.version_info[0] == 2 else viter104)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        if self.r is not None:
            oprot.writeFieldBegin('r', TType.STRUCT, 2)
            self.r.write(oprot)
            oprot.writeFieldEnd()
        if self.s is not None:
            oprot.writeFieldBegin('s', TType.STRUCT, 3)
            self.s.write(oprot)
            oprot.writeFieldEnd()
        if self.n is not None:
            oprot.writeFieldBegin('n', TType.STRUCT, 4)
            self.n.write(oprot)
            oprot.writeFieldEnd()
        if self.i is not None:
            oprot.writeFieldBegin('i', TType.STRUCT, 5)
            self.i.write(oprot)
            oprot.writeFieldEnd()
        if self.f is not None:
            oprot.writeFieldBegin('f', TType.STRUCT, 6)
            self.f.write(oprot)
            oprot.writeFieldEnd()
        if self.o is not None:
            oprot.writeFieldBegin('o', TType.STRUCT, 7)
            self.o.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(start_server_result)
start_server_result.thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 0
    (1, TType.STRUCT, 'e', [nameException, None], None, ),  # 1
    (2, TType.STRUCT, 'r', [ressourceException, None], None, ),  # 2
    (3, TType.STRUCT, 's', [serverNotFoundException, None], None, ),  # 3
    (4, TType.STRUCT, 'n', [networkNotFoundException, None], None, ),  # 4
    (5, TType.STRUCT, 'i', [imageNotFoundException, None], None, ),  # 5
    (6, TType.STRUCT, 'f', [flavorNotFoundException, None], None, ),  # 6
    (7, TType.STRUCT, 'o', [otherException, None], None, ),  # 7
)


class start_server_with_custom_key_args(object):
    """
    Attributes:
     - flavor: Name of the  Flavor to use.
     - image: Name of the image to use.
     - servername: Name for the new server
     - metadata: Metadata for the new instance
     - diskspace: Diskspace in GB for additional volume.
     - volumename: Name of additional Volume

    """


    def __init__(self, flavor=None, image=None, servername=None, metadata=None, diskspace=None, volumename=None,):
        self.flavor = flavor
        self.image = image
        self.servername = servername
        self.metadata = metadata
        self.diskspace = diskspace
        self.volumename = volumename

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.flavor = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.image = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.servername = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.metadata = {}
                    (_ktype106, _vtype107, _size105) = iprot.readMapBegin()
                    for _i109 in range(_size105):
                        _key110 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val111 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.metadata[_key110] = _val111
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.diskspace = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.volumename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('start_server_with_custom_key_args')
        if self.flavor is not None:
            oprot.writeFieldBegin('flavor', TType.STRING, 1)
            oprot.writeString(self.flavor.encode('utf-8') if sys.version_info[0] == 2 else self.flavor)
            oprot.writeFieldEnd()
        if self.image is not None:
            oprot.writeFieldBegin('image', TType.STRING, 2)
            oprot.writeString(self.image.encode('utf-8') if sys.version_info[0] == 2 else self.image)
            oprot.writeFieldEnd()
        if self.servername is not None:
            oprot.writeFieldBegin('servername', TType.STRING, 3)
            oprot.writeString(self.servername.encode('utf-8') if sys.version_info[0] == 2 else self.servername)
            oprot.writeFieldEnd()
        if self.metadata is not None:
            oprot.writeFieldBegin('metadata', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.metadata))
            for kiter112, viter113 in self.metadata.items():
                oprot.writeString(kiter112.encode('utf-8') if sys.version_info[0] == 2 else kiter112)
                oprot.writeString(viter113.encode('utf-8') if sys.version_info[0] == 2 else viter113)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.diskspace is not None:
            oprot.writeFieldBegin('diskspace', TType.STRING, 5)
            oprot.writeString(self.diskspace.encode('utf-8') if sys.version_info[0] == 2 else self.diskspace)
            oprot.writeFieldEnd()
        if self.volumename is not None:
            oprot.writeFieldBegin('volumename', TType.STRING, 6)
            oprot.writeString(self.volumename.encode('utf-8') if sys.version_info[0] == 2 else self.volumename)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(start_server_with_custom_key_args)
start_server_with_custom_key_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'flavor', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'image', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'servername', 'UTF8', None, ),  # 3
    (4, TType.MAP, 'metadata', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.STRING, 'diskspace', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'volumename', 'UTF8', None, ),  # 6
)


class start_server_with_custom_key_result(object):
    """
    Attributes:
     - success
     - e
     - r
     - s
     - n
     - i
     - f
     - o

    """


    def __init__(self, success=None, e=None, r=None, s=None, n=None, i=None, f=None, o=None,):
        self.success = success
        self.e = e
        self.r = r
        self.s = s
        self.n = n
        self.i = i
        self.f = f
        self.o = o

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.MAP:
                    self.success = {}
                    (_ktype115, _vtype116, _size114) = iprot.readMapBegin()
                    for _i118 in range(_size114):
                        _key119 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val120 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.success[_key119] = _val120
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = nameException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.r = ressourceException()
                    self.r.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.s = serverNotFoundException()
                    self.s.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.n = networkNotFoundException()
                    self.n.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.i = imageNotFoundException()
                    self.i.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.f = flavorNotFoundException()
                    self.f.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.o = otherException()
                    self.o.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('start_server_with_custom_key_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.MAP, 0)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
            for kiter121, viter122 in self.success.items():
                oprot.writeString(kiter121.encode('utf-8') if sys.version_info[0] == 2 else kiter121)
                oprot.writeString(viter122.encode('utf-8') if sys.version_info[0] == 2 else viter122)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        if self.r is not None:
            oprot.writeFieldBegin('r', TType.STRUCT, 2)
            self.r.write(oprot)
            oprot.writeFieldEnd()
        if self.s is not None:
            oprot.writeFieldBegin('s', TType.STRUCT, 3)
            self.s.write(oprot)
            oprot.writeFieldEnd()
        if self.n is not None:
            oprot.writeFieldBegin('n', TType.STRUCT, 4)
            self.n.write(oprot)
            oprot.writeFieldEnd()
        if self.i is not None:
            oprot.writeFieldBegin('i', TType.STRUCT, 5)
            self.i.write(oprot)
            oprot.writeFieldEnd()
        if self.f is not None:
            oprot.writeFieldBegin('f', TType.STRUCT, 6)
            self.f.write(oprot)
            oprot.writeFieldEnd()
        if self.o is not None:
            oprot.writeFieldBegin('o', TType.STRUCT, 7)
            self.o.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(start_server_with_custom_key_result)
start_server_with_custom_key_result.thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 0
    (1, TType.STRUCT, 'e', [nameException, None], None, ),  # 1
    (2, TType.STRUCT, 'r', [ressourceException, None], None, ),  # 2
    (3, TType.STRUCT, 's', [serverNotFoundException, None], None, ),  # 3
    (4, TType.STRUCT, 'n', [networkNotFoundException, None], None, ),  # 4
    (5, TType.STRUCT, 'i', [imageNotFoundException, None], None, ),  # 5
    (6, TType.STRUCT, 'f', [flavorNotFoundException, None], None, ),  # 6
    (7, TType.STRUCT, 'o', [otherException, None], None, ),  # 7
)


class exist_server_args(object):
    """
    Attributes:
     - name

    """


    def __init__(self, name=None,):
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('exist_server_args')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(exist_server_args)
exist_server_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
)


class exist_server_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('exist_server_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(exist_server_result)
exist_server_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class create_and_deploy_playbook_args(object):
    """
    Attributes:
     - public_key
     - playbooks_information
     - openstack_id

    """


    def __init__(self, public_key=None, playbooks_information=None, openstack_id=None,):
        self.public_key = public_key
        self.playbooks_information = playbooks_information
        self.openstack_id = openstack_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.public_key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.playbooks_information = {}
                    (_ktype124, _vtype125, _size123) = iprot.readMapBegin()
                    for _i127 in range(_size123):
                        _key128 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val129 = {}
                        (_ktype131, _vtype132, _size130) = iprot.readMapBegin()
                        for _i134 in range(_size130):
                            _key135 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _val136 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _val129[_key135] = _val136
                        iprot.readMapEnd()
                        self.playbooks_information[_key128] = _val129
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.openstack_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_and_deploy_playbook_args')
        if self.public_key is not None:
            oprot.writeFieldBegin('public_key', TType.STRING, 1)
            oprot.writeString(self.public_key.encode('utf-8') if sys.version_info[0] == 2 else self.public_key)
            oprot.writeFieldEnd()
        if self.playbooks_information is not None:
            oprot.writeFieldBegin('playbooks_information', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.playbooks_information))
            for kiter137, viter138 in self.playbooks_information.items():
                oprot.writeString(kiter137.encode('utf-8') if sys.version_info[0] == 2 else kiter137)
                oprot.writeMapBegin(TType.STRING, TType.STRING, len(viter138))
                for kiter139, viter140 in viter138.items():
                    oprot.writeString(kiter139.encode('utf-8') if sys.version_info[0] == 2 else kiter139)
                    oprot.writeString(viter140.encode('utf-8') if sys.version_info[0] == 2 else viter140)
                oprot.writeMapEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.openstack_id is not None:
            oprot.writeFieldBegin('openstack_id', TType.STRING, 3)
            oprot.writeString(self.openstack_id.encode('utf-8') if sys.version_info[0] == 2 else self.openstack_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_and_deploy_playbook_args)
create_and_deploy_playbook_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'public_key', 'UTF8', None, ),  # 1
    (2, TType.MAP, 'playbooks_information', (TType.STRING, 'UTF8', TType.MAP, (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), False), None, ),  # 2
    (3, TType.STRING, 'openstack_id', 'UTF8', None, ),  # 3
)


class create_and_deploy_playbook_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_and_deploy_playbook_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_and_deploy_playbook_result)
create_and_deploy_playbook_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class get_playbook_logs_args(object):
    """
    Attributes:
     - openstack_id

    """


    def __init__(self, openstack_id=None,):
        self.openstack_id = openstack_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.openstack_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_playbook_logs_args')
        if self.openstack_id is not None:
            oprot.writeFieldBegin('openstack_id', TType.STRING, 1)
            oprot.writeString(self.openstack_id.encode('utf-8') if sys.version_info[0] == 2 else self.openstack_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_playbook_logs_args)
get_playbook_logs_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'openstack_id', 'UTF8', None, ),  # 1
)


class get_playbook_logs_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = PlaybookResult()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_playbook_logs_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_playbook_logs_result)
get_playbook_logs_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [PlaybookResult, None], None, ),  # 0
)


class add_security_group_to_server_args(object):
    """
    Attributes:
     - http: If http ports are open
     - https: If https ports are open
     - udp: If udp ports are open
     - server_id: OpenStack id of the server

    """


    def __init__(self, http=None, https=None, udp=None, server_id=None,):
        self.http = http
        self.https = https
        self.udp = udp
        self.server_id = server_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.http = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.https = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.udp = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.server_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_security_group_to_server_args')
        if self.http is not None:
            oprot.writeFieldBegin('http', TType.BOOL, 1)
            oprot.writeBool(self.http)
            oprot.writeFieldEnd()
        if self.https is not None:
            oprot.writeFieldBegin('https', TType.BOOL, 2)
            oprot.writeBool(self.https)
            oprot.writeFieldEnd()
        if self.udp is not None:
            oprot.writeFieldBegin('udp', TType.BOOL, 3)
            oprot.writeBool(self.udp)
            oprot.writeFieldEnd()
        if self.server_id is not None:
            oprot.writeFieldBegin('server_id', TType.STRING, 4)
            oprot.writeString(self.server_id.encode('utf-8') if sys.version_info[0] == 2 else self.server_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(add_security_group_to_server_args)
add_security_group_to_server_args.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'http', None, None, ),  # 1
    (2, TType.BOOL, 'https', None, None, ),  # 2
    (3, TType.BOOL, 'udp', None, None, ),  # 3
    (4, TType.STRING, 'server_id', 'UTF8', None, ),  # 4
)


class add_security_group_to_server_result(object):
    """
    Attributes:
     - success
     - r
     - s

    """


    def __init__(self, success=None, r=None, s=None,):
        self.success = success
        self.r = r
        self.s = s

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.r = ressourceException()
                    self.r.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.s = serverNotFoundException()
                    self.s.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_security_group_to_server_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.r is not None:
            oprot.writeFieldBegin('r', TType.STRUCT, 1)
            self.r.write(oprot)
            oprot.writeFieldEnd()
        if self.s is not None:
            oprot.writeFieldBegin('s', TType.STRUCT, 2)
            self.s.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(add_security_group_to_server_result)
add_security_group_to_server_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'r', [ressourceException, None], None, ),  # 1
    (2, TType.STRUCT, 's', [serverNotFoundException, None], None, ),  # 2
)


class get_server_args(object):
    """
    Attributes:
     - openstack_id: Id of the server.

    """


    def __init__(self, openstack_id=None,):
        self.openstack_id = openstack_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.openstack_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_server_args')
        if self.openstack_id is not None:
            oprot.writeFieldBegin('openstack_id', TType.STRING, 1)
            oprot.writeString(self.openstack_id.encode('utf-8') if sys.version_info[0] == 2 else self.openstack_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_server_args)
get_server_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'openstack_id', 'UTF8', None, ),  # 1
)


class get_server_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = VM()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = serverNotFoundException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_server_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_server_result)
get_server_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [VM, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [serverNotFoundException, None], None, ),  # 1
)


class stop_server_args(object):
    """
    Attributes:
     - openstack_id: Id of the server.

    """


    def __init__(self, openstack_id=None,):
        self.openstack_id = openstack_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.openstack_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('stop_server_args')
        if self.openstack_id is not None:
            oprot.writeFieldBegin('openstack_id', TType.STRING, 1)
            oprot.writeString(self.openstack_id.encode('utf-8') if sys.version_info[0] == 2 else self.openstack_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(stop_server_args)
stop_server_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'openstack_id', 'UTF8', None, ),  # 1
)


class stop_server_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = serverNotFoundException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('stop_server_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(stop_server_result)
stop_server_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [serverNotFoundException, None], None, ),  # 1
)


class create_snapshot_args(object):
    """
    Attributes:
     - openstack_id: Id of the server
     - name: Name of new Snapshot
     - elixir_id: Elixir-Id of the user who requested creation of Snapshot
     - base_tag: Tag with which the servers image is also tagged ( for connection information at the webapp)
     - description: Description of the new snapshot

    """


    def __init__(self, openstack_id=None, name=None, elixir_id=None, base_tag=None, description=None,):
        self.openstack_id = openstack_id
        self.name = name
        self.elixir_id = elixir_id
        self.base_tag = base_tag
        self.description = description

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.openstack_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.elixir_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.base_tag = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_snapshot_args')
        if self.openstack_id is not None:
            oprot.writeFieldBegin('openstack_id', TType.STRING, 1)
            oprot.writeString(self.openstack_id.encode('utf-8') if sys.version_info[0] == 2 else self.openstack_id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.elixir_id is not None:
            oprot.writeFieldBegin('elixir_id', TType.STRING, 3)
            oprot.writeString(self.elixir_id.encode('utf-8') if sys.version_info[0] == 2 else self.elixir_id)
            oprot.writeFieldEnd()
        if self.base_tag is not None:
            oprot.writeFieldBegin('base_tag', TType.STRING, 4)
            oprot.writeString(self.base_tag.encode('utf-8') if sys.version_info[0] == 2 else self.base_tag)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 5)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_snapshot_args)
create_snapshot_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'openstack_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'elixir_id', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'base_tag', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'description', 'UTF8', None, ),  # 5
)


class create_snapshot_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = serverNotFoundException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_snapshot_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_snapshot_result)
create_snapshot_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
    (1, TType.STRUCT, 'e', [serverNotFoundException, None], None, ),  # 1
)


class get_limits_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_limits_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_limits_args)
get_limits_args.thrift_spec = (
)


class get_limits_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.MAP:
                    self.success = {}
                    (_ktype142, _vtype143, _size141) = iprot.readMapBegin()
                    for _i145 in range(_size141):
                        _key146 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val147 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.success[_key146] = _val147
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_limits_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.MAP, 0)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
            for kiter148, viter149 in self.success.items():
                oprot.writeString(kiter148.encode('utf-8') if sys.version_info[0] == 2 else kiter148)
                oprot.writeString(viter149.encode('utf-8') if sys.version_info[0] == 2 else viter149)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_limits_result)
get_limits_result.thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 0
)


class delete_image_args(object):
    """
    Attributes:
     - image_id: Id of image

    """


    def __init__(self, image_id=None,):
        self.image_id = image_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.image_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('delete_image_args')
        if self.image_id is not None:
            oprot.writeFieldBegin('image_id', TType.STRING, 1)
            oprot.writeString(self.image_id.encode('utf-8') if sys.version_info[0] == 2 else self.image_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(delete_image_args)
delete_image_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'image_id', 'UTF8', None, ),  # 1
)


class delete_image_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = imageNotFoundException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('delete_image_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(delete_image_result)
delete_image_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [imageNotFoundException, None], None, ),  # 1
)


class delete_volume_attachment_args(object):
    """
    Attributes:
     - volume_id: Id of the attached volume
     - server_id: Id of the server where the volume is attached

    """


    def __init__(self, volume_id=None, server_id=None,):
        self.volume_id = volume_id
        self.server_id = server_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.volume_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.server_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('delete_volume_attachment_args')
        if self.volume_id is not None:
            oprot.writeFieldBegin('volume_id', TType.STRING, 1)
            oprot.writeString(self.volume_id.encode('utf-8') if sys.version_info[0] == 2 else self.volume_id)
            oprot.writeFieldEnd()
        if self.server_id is not None:
            oprot.writeFieldBegin('server_id', TType.STRING, 2)
            oprot.writeString(self.server_id.encode('utf-8') if sys.version_info[0] == 2 else self.server_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(delete_volume_attachment_args)
delete_volume_attachment_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'volume_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'server_id', 'UTF8', None, ),  # 2
)


class delete_volume_attachment_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = serverNotFoundException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('delete_volume_attachment_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(delete_volume_attachment_result)
delete_volume_attachment_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [serverNotFoundException, None], None, ),  # 1
)


class delete_volume_args(object):
    """
    Attributes:
     - volume_id

    """


    def __init__(self, volume_id=None,):
        self.volume_id = volume_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.volume_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('delete_volume_args')
        if self.volume_id is not None:
            oprot.writeFieldBegin('volume_id', TType.STRING, 1)
            oprot.writeString(self.volume_id.encode('utf-8') if sys.version_info[0] == 2 else self.volume_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(delete_volume_args)
delete_volume_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'volume_id', 'UTF8', None, ),  # 1
)


class delete_volume_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('delete_volume_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(delete_volume_result)
delete_volume_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class attach_volume_to_server_args(object):
    """
    Attributes:
     - openstack_id: Id of server
     - volume_id: Id of volume

    """


    def __init__(self, openstack_id=None, volume_id=None,):
        self.openstack_id = openstack_id
        self.volume_id = volume_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.openstack_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.volume_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('attach_volume_to_server_args')
        if self.openstack_id is not None:
            oprot.writeFieldBegin('openstack_id', TType.STRING, 1)
            oprot.writeString(self.openstack_id.encode('utf-8') if sys.version_info[0] == 2 else self.openstack_id)
            oprot.writeFieldEnd()
        if self.volume_id is not None:
            oprot.writeFieldBegin('volume_id', TType.STRING, 2)
            oprot.writeString(self.volume_id.encode('utf-8') if sys.version_info[0] == 2 else self.volume_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(attach_volume_to_server_args)
attach_volume_to_server_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'openstack_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'volume_id', 'UTF8', None, ),  # 2
)


class attach_volume_to_server_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = serverNotFoundException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('attach_volume_to_server_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(attach_volume_to_server_result)
attach_volume_to_server_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [serverNotFoundException, None], None, ),  # 1
)


class check_server_status_args(object):
    """
    Attributes:
     - openstack_id: Id of the server
     - diskspace: diskspace of server(volume will be attached if server is active and diskpace >0)
     - volume_id: Id of the volume

    """


    def __init__(self, openstack_id=None, diskspace=None, volume_id=None,):
        self.openstack_id = openstack_id
        self.diskspace = diskspace
        self.volume_id = volume_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.openstack_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.diskspace = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.volume_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('check_server_status_args')
        if self.openstack_id is not None:
            oprot.writeFieldBegin('openstack_id', TType.STRING, 1)
            oprot.writeString(self.openstack_id.encode('utf-8') if sys.version_info[0] == 2 else self.openstack_id)
            oprot.writeFieldEnd()
        if self.diskspace is not None:
            oprot.writeFieldBegin('diskspace', TType.I32, 2)
            oprot.writeI32(self.diskspace)
            oprot.writeFieldEnd()
        if self.volume_id is not None:
            oprot.writeFieldBegin('volume_id', TType.STRING, 3)
            oprot.writeString(self.volume_id.encode('utf-8') if sys.version_info[0] == 2 else self.volume_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(check_server_status_args)
check_server_status_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'openstack_id', 'UTF8', None, ),  # 1
    (2, TType.I32, 'diskspace', None, None, ),  # 2
    (3, TType.STRING, 'volume_id', 'UTF8', None, ),  # 3
)


class check_server_status_result(object):
    """
    Attributes:
     - success
     - e
     - r

    """


    def __init__(self, success=None, e=None, r=None,):
        self.success = success
        self.e = e
        self.r = r

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = VM()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = serverNotFoundException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.r = ressourceException()
                    self.r.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('check_server_status_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        if self.r is not None:
            oprot.writeFieldBegin('r', TType.STRUCT, 2)
            self.r.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(check_server_status_result)
check_server_status_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [VM, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [serverNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'r', [ressourceException, None], None, ),  # 2
)


class setUserPassword_args(object):
    """
    Attributes:
     - user: Elixir-Id of the user which wants to set a password
     - password: New password

    """


    def __init__(self, user=None, password=None,):
        self.user = user
        self.password = password

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.user = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('setUserPassword_args')
        if self.user is not None:
            oprot.writeFieldBegin('user', TType.STRING, 1)
            oprot.writeString(self.user.encode('utf-8') if sys.version_info[0] == 2 else self.user)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 2)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(setUserPassword_args)
setUserPassword_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'user', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'password', 'UTF8', None, ),  # 2
)


class setUserPassword_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = otherException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('setUserPassword_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(setUserPassword_result)
setUserPassword_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
    (1, TType.STRUCT, 'e', [otherException, None], None, ),  # 1
)


class resume_server_args(object):
    """
    Attributes:
     - openstack_id: Id of the server

    """


    def __init__(self, openstack_id=None,):
        self.openstack_id = openstack_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.openstack_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('resume_server_args')
        if self.openstack_id is not None:
            oprot.writeFieldBegin('openstack_id', TType.STRING, 1)
            oprot.writeString(self.openstack_id.encode('utf-8') if sys.version_info[0] == 2 else self.openstack_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(resume_server_args)
resume_server_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'openstack_id', 'UTF8', None, ),  # 1
)


class resume_server_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = serverNotFoundException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('resume_server_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(resume_server_result)
resume_server_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [serverNotFoundException, None], None, ),  # 1
)


class create_volume_args(object):
    """
    Attributes:
     - volume_name: Name of volume
     - diskspace: Diskspace in GB for new volume
     - metadata: Metadata for the new volume

    """


    def __init__(self, volume_name=None, diskspace=None, metadata=None,):
        self.volume_name = volume_name
        self.diskspace = diskspace
        self.metadata = metadata

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.volume_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.diskspace = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.metadata = {}
                    (_ktype151, _vtype152, _size150) = iprot.readMapBegin()
                    for _i154 in range(_size150):
                        _key155 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val156 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.metadata[_key155] = _val156
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_volume_args')
        if self.volume_name is not None:
            oprot.writeFieldBegin('volume_name', TType.STRING, 1)
            oprot.writeString(self.volume_name.encode('utf-8') if sys.version_info[0] == 2 else self.volume_name)
            oprot.writeFieldEnd()
        if self.diskspace is not None:
            oprot.writeFieldBegin('diskspace', TType.I32, 2)
            oprot.writeI32(self.diskspace)
            oprot.writeFieldEnd()
        if self.metadata is not None:
            oprot.writeFieldBegin('metadata', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.metadata))
            for kiter157, viter158 in self.metadata.items():
                oprot.writeString(kiter157.encode('utf-8') if sys.version_info[0] == 2 else kiter157)
                oprot.writeString(viter158.encode('utf-8') if sys.version_info[0] == 2 else viter158)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_volume_args)
create_volume_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'volume_name', 'UTF8', None, ),  # 1
    (2, TType.I32, 'diskspace', None, None, ),  # 2
    (3, TType.MAP, 'metadata', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 3
)


class create_volume_result(object):
    """
    Attributes:
     - success
     - r

    """


    def __init__(self, success=None, r=None,):
        self.success = success
        self.r = r

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.r = ressourceException()
                    self.r.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_volume_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        if self.r is not None:
            oprot.writeFieldBegin('r', TType.STRUCT, 1)
            self.r.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_volume_result)
create_volume_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
    (1, TType.STRUCT, 'r', [ressourceException, None], None, ),  # 1
)


class reboot_server_args(object):
    """
    Attributes:
     - server_id: Id of the server
     - reboot_type: HARD or SOFT

    """


    def __init__(self, server_id=None, reboot_type=None,):
        self.server_id = server_id
        self.reboot_type = reboot_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.server_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.reboot_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('reboot_server_args')
        if self.server_id is not None:
            oprot.writeFieldBegin('server_id', TType.STRING, 1)
            oprot.writeString(self.server_id.encode('utf-8') if sys.version_info[0] == 2 else self.server_id)
            oprot.writeFieldEnd()
        if self.reboot_type is not None:
            oprot.writeFieldBegin('reboot_type', TType.STRING, 2)
            oprot.writeString(self.reboot_type.encode('utf-8') if sys.version_info[0] == 2 else self.reboot_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(reboot_server_args)
reboot_server_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'server_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'reboot_type', 'UTF8', None, ),  # 2
)


class reboot_server_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = serverNotFoundException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('reboot_server_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(reboot_server_result)
reboot_server_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [serverNotFoundException, None], None, ),  # 1
)
fix_spec(all_structs)
del all_structs

