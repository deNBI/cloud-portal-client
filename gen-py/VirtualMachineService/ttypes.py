#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class VM(object):
    """
    structs are mapped by Thrift to classes or structs in your language of
    choice. This struct has two fields, an Identifier of type `id` and
    a Description of type `string`. The Identifier defaults to DEFAULT_ID.

    Attributes:
     - flav: A unique identifier for this task.
     - img
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'flav', (Flavor, Flavor.thrift_spec), None, ),  # 1
        (2, TType.STRING, 'img', 'UTF8', None, ),  # 2
    )

    def __init__(self, flav=None, img=None,):
        self.flav = flav
        self.img = img

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.flav = Flavor()
                    self.flav.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.img = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('VM')
        if self.flav is not None:
            oprot.writeFieldBegin('flav', TType.STRUCT, 1)
            self.flav.write(oprot)
            oprot.writeFieldEnd()
        if self.img is not None:
            oprot.writeFieldBegin('img', TType.STRING, 2)
            oprot.writeString(self.img.encode('utf-8') if sys.version_info[0] == 2 else self.img)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.flav is None:
            raise TProtocolException(message='Required field flav is unset!')
        if self.img is None:
            raise TProtocolException(message='Required field img is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Flavor(object):
    """
    Attributes:
     - vcpus
     - ram
     - disk
     - name
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'vcpus', None, None, ),  # 1
        (2, TType.I32, 'ram', None, None, ),  # 2
        (3, TType.I32, 'disk', None, None, ),  # 3
        (4, TType.STRING, 'name', 'UTF8', None, ),  # 4
    )

    def __init__(self, vcpus=None, ram=None, disk=None, name=None,):
        self.vcpus = vcpus
        self.ram = ram
        self.disk = disk
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.vcpus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.ram = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.disk = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Flavor')
        if self.vcpus is not None:
            oprot.writeFieldBegin('vcpus', TType.I32, 1)
            oprot.writeI32(self.vcpus)
            oprot.writeFieldEnd()
        if self.ram is not None:
            oprot.writeFieldBegin('ram', TType.I32, 2)
            oprot.writeI32(self.ram)
            oprot.writeFieldEnd()
        if self.disk is not None:
            oprot.writeFieldBegin('disk', TType.I32, 3)
            oprot.writeI32(self.disk)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 4)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.vcpus is None:
            raise TProtocolException(message='Required field vcpus is unset!')
        if self.ram is None:
            raise TProtocolException(message='Required field ram is unset!')
        if self.disk is None:
            raise TProtocolException(message='Required field disk is unset!')
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class instanceException(TException):
    """
    Exceptions inherit from language-specific base exceptions.

    Attributes:
     - Reason: @ The reason for this exception.
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'Reason', 'UTF8', None, ),  # 1
    )

    def __init__(self, Reason=None,):
        self.Reason = Reason

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Reason = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('instanceException')
        if self.Reason is not None:
            oprot.writeFieldBegin('Reason', TType.STRING, 1)
            oprot.writeString(self.Reason.encode('utf-8') if sys.version_info[0] == 2 else self.Reason)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
